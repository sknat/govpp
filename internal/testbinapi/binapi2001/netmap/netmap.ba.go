// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.5.0-dev
//  VPP:              20.01
// source: .vppapi/core/netmap.api.json

// Package netmap contains generated bindings for API file netmap.api.
//
// Contents:
//   4 messages
//
package netmap

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "netmap"
	APIVersion = "1.0.0"
	VersionCrc = 0x40e7a84f
)

// NetmapCreate defines message 'netmap_create'.
type NetmapCreate struct {
	NetmapIfName    []byte `binapi:"u8[64],name=netmap_if_name" json:"netmap_if_name,omitempty"`
	HwAddr          []byte `binapi:"u8[6],name=hw_addr" json:"hw_addr,omitempty"`
	UseRandomHwAddr uint8  `binapi:"u8,name=use_random_hw_addr" json:"use_random_hw_addr,omitempty"`
	IsPipe          uint8  `binapi:"u8,name=is_pipe" json:"is_pipe,omitempty"`
	IsMaster        uint8  `binapi:"u8,name=is_master" json:"is_master,omitempty"`
}

func (m *NetmapCreate) Reset()               { *m = NetmapCreate{} }
func (*NetmapCreate) GetMessageName() string { return "netmap_create" }
func (*NetmapCreate) GetCrcString() string   { return "5299044e" }
func (*NetmapCreate) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *NetmapCreate) GetRetVal() error {
	return nil
}

func (m *NetmapCreate) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.NetmapIfName
	size += 1 * 6  // m.HwAddr
	size += 1      // m.UseRandomHwAddr
	size += 1      // m.IsPipe
	size += 1      // m.IsMaster
	return size
}
func (m *NetmapCreate) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.NetmapIfName, 64)
	buf.EncodeBytes(m.HwAddr, 6)
	buf.EncodeUint8(m.UseRandomHwAddr)
	buf.EncodeUint8(m.IsPipe)
	buf.EncodeUint8(m.IsMaster)
	return buf.Bytes(), nil
}
func (m *NetmapCreate) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.NetmapIfName = make([]byte, 64)
	copy(m.NetmapIfName, buf.DecodeBytes(len(m.NetmapIfName)))
	m.HwAddr = make([]byte, 6)
	copy(m.HwAddr, buf.DecodeBytes(len(m.HwAddr)))
	m.UseRandomHwAddr = buf.DecodeUint8()
	m.IsPipe = buf.DecodeUint8()
	m.IsMaster = buf.DecodeUint8()
	return nil
}

// NetmapCreateReply defines message 'netmap_create_reply'.
type NetmapCreateReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NetmapCreateReply) Reset()               { *m = NetmapCreateReply{} }
func (*NetmapCreateReply) GetMessageName() string { return "netmap_create_reply" }
func (*NetmapCreateReply) GetCrcString() string   { return "e8d4e804" }
func (*NetmapCreateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *NetmapCreateReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *NetmapCreateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NetmapCreateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NetmapCreateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// NetmapDelete defines message 'netmap_delete'.
type NetmapDelete struct {
	NetmapIfName []byte `binapi:"u8[64],name=netmap_if_name" json:"netmap_if_name,omitempty"`
}

func (m *NetmapDelete) Reset()               { *m = NetmapDelete{} }
func (*NetmapDelete) GetMessageName() string { return "netmap_delete" }
func (*NetmapDelete) GetCrcString() string   { return "a8b6c201" }
func (*NetmapDelete) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *NetmapDelete) GetRetVal() error {
	return nil
}

func (m *NetmapDelete) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 64 // m.NetmapIfName
	return size
}
func (m *NetmapDelete) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.NetmapIfName, 64)
	return buf.Bytes(), nil
}
func (m *NetmapDelete) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.NetmapIfName = make([]byte, 64)
	copy(m.NetmapIfName, buf.DecodeBytes(len(m.NetmapIfName)))
	return nil
}

// NetmapDeleteReply defines message 'netmap_delete_reply'.
type NetmapDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *NetmapDeleteReply) Reset()               { *m = NetmapDeleteReply{} }
func (*NetmapDeleteReply) GetMessageName() string { return "netmap_delete_reply" }
func (*NetmapDeleteReply) GetCrcString() string   { return "e8d4e804" }
func (*NetmapDeleteReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *NetmapDeleteReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *NetmapDeleteReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *NetmapDeleteReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *NetmapDeleteReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_netmap_binapi_init() }
func file_netmap_binapi_init() {
	api.RegisterMessage((*NetmapCreate)(nil), "netmap_create_5299044e")
	api.RegisterMessage((*NetmapCreateReply)(nil), "netmap_create_reply_e8d4e804")
	api.RegisterMessage((*NetmapDelete)(nil), "netmap_delete_a8b6c201")
	api.RegisterMessage((*NetmapDeleteReply)(nil), "netmap_delete_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*NetmapCreate)(nil),
		(*NetmapCreateReply)(nil),
		(*NetmapDelete)(nil),
		(*NetmapDeleteReply)(nil),
	}
}
