// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.5.0-dev
//  VPP:              20.01
// source: .vppapi/plugins/ikev2.api.json

// Package ikev2 contains generated bindings for API file ikev2.api.
//
// Contents:
//   6 aliases
//  10 enums
//   6 structs
//   1 union
//  28 messages
//
package ikev2

import (
	"fmt"
	"net"
	"strconv"
	"strings"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "ikev2"
	APIVersion = "1.0.1"
	VersionCrc = 0x4eab5d22
)

// AddressFamily defines enum 'address_family'.
type AddressFamily uint32

const (
	ADDRESS_IP4 AddressFamily = 0
	ADDRESS_IP6 AddressFamily = 1
)

var (
	AddressFamily_name = map[uint32]string{
		0: "ADDRESS_IP4",
		1: "ADDRESS_IP6",
	}
	AddressFamily_value = map[string]uint32{
		"ADDRESS_IP4": 0,
		"ADDRESS_IP6": 1,
	}
)

func (x AddressFamily) String() string {
	s, ok := AddressFamily_name[uint32(x)]
	if ok {
		return s
	}
	return "AddressFamily(" + strconv.Itoa(int(x)) + ")"
}

// IfStatusFlags defines enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var (
	IfStatusFlags_name = map[uint32]string{
		1: "IF_STATUS_API_FLAG_ADMIN_UP",
		2: "IF_STATUS_API_FLAG_LINK_UP",
	}
	IfStatusFlags_value = map[string]uint32{
		"IF_STATUS_API_FLAG_ADMIN_UP": 1,
		"IF_STATUS_API_FLAG_LINK_UP":  2,
	}
)

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	str := func(n uint32) string {
		s, ok := IfStatusFlags_name[uint32(n)]
		if ok {
			return s
		}
		return "IfStatusFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint32(0); i <= 32; i++ {
		val := uint32(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint32(x))
	}
	return s
}

// IfType defines enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var (
	IfType_name = map[uint32]string{
		1: "IF_API_TYPE_HARDWARE",
		2: "IF_API_TYPE_SUB",
		3: "IF_API_TYPE_P2P",
		4: "IF_API_TYPE_PIPE",
	}
	IfType_value = map[string]uint32{
		"IF_API_TYPE_HARDWARE": 1,
		"IF_API_TYPE_SUB":      2,
		"IF_API_TYPE_P2P":      3,
		"IF_API_TYPE_PIPE":     4,
	}
)

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return "IfType(" + strconv.Itoa(int(x)) + ")"
}

// IPDscp defines enum 'ip_dscp'.
type IPDscp uint8

const (
	IP_API_DSCP_CS0  IPDscp = 0
	IP_API_DSCP_CS1  IPDscp = 8
	IP_API_DSCP_AF11 IPDscp = 10
	IP_API_DSCP_AF12 IPDscp = 12
	IP_API_DSCP_AF13 IPDscp = 14
	IP_API_DSCP_CS2  IPDscp = 16
	IP_API_DSCP_AF21 IPDscp = 18
	IP_API_DSCP_AF22 IPDscp = 20
	IP_API_DSCP_AF23 IPDscp = 22
	IP_API_DSCP_CS3  IPDscp = 24
	IP_API_DSCP_AF31 IPDscp = 26
	IP_API_DSCP_AF32 IPDscp = 28
	IP_API_DSCP_AF33 IPDscp = 30
	IP_API_DSCP_CS4  IPDscp = 32
	IP_API_DSCP_AF41 IPDscp = 34
	IP_API_DSCP_AF42 IPDscp = 36
	IP_API_DSCP_AF43 IPDscp = 38
	IP_API_DSCP_CS5  IPDscp = 40
	IP_API_DSCP_EF   IPDscp = 46
	IP_API_DSCP_CS6  IPDscp = 48
	IP_API_DSCP_CS7  IPDscp = 50
)

var (
	IPDscp_name = map[uint8]string{
		0:  "IP_API_DSCP_CS0",
		8:  "IP_API_DSCP_CS1",
		10: "IP_API_DSCP_AF11",
		12: "IP_API_DSCP_AF12",
		14: "IP_API_DSCP_AF13",
		16: "IP_API_DSCP_CS2",
		18: "IP_API_DSCP_AF21",
		20: "IP_API_DSCP_AF22",
		22: "IP_API_DSCP_AF23",
		24: "IP_API_DSCP_CS3",
		26: "IP_API_DSCP_AF31",
		28: "IP_API_DSCP_AF32",
		30: "IP_API_DSCP_AF33",
		32: "IP_API_DSCP_CS4",
		34: "IP_API_DSCP_AF41",
		36: "IP_API_DSCP_AF42",
		38: "IP_API_DSCP_AF43",
		40: "IP_API_DSCP_CS5",
		46: "IP_API_DSCP_EF",
		48: "IP_API_DSCP_CS6",
		50: "IP_API_DSCP_CS7",
	}
	IPDscp_value = map[string]uint8{
		"IP_API_DSCP_CS0":  0,
		"IP_API_DSCP_CS1":  8,
		"IP_API_DSCP_AF11": 10,
		"IP_API_DSCP_AF12": 12,
		"IP_API_DSCP_AF13": 14,
		"IP_API_DSCP_CS2":  16,
		"IP_API_DSCP_AF21": 18,
		"IP_API_DSCP_AF22": 20,
		"IP_API_DSCP_AF23": 22,
		"IP_API_DSCP_CS3":  24,
		"IP_API_DSCP_AF31": 26,
		"IP_API_DSCP_AF32": 28,
		"IP_API_DSCP_AF33": 30,
		"IP_API_DSCP_CS4":  32,
		"IP_API_DSCP_AF41": 34,
		"IP_API_DSCP_AF42": 36,
		"IP_API_DSCP_AF43": 38,
		"IP_API_DSCP_CS5":  40,
		"IP_API_DSCP_EF":   46,
		"IP_API_DSCP_CS6":  48,
		"IP_API_DSCP_CS7":  50,
	}
)

func (x IPDscp) String() string {
	s, ok := IPDscp_name[uint8(x)]
	if ok {
		return s
	}
	return "IPDscp(" + strconv.Itoa(int(x)) + ")"
}

// IPEcn defines enum 'ip_ecn'.
type IPEcn uint8

const (
	IP_API_ECN_NONE IPEcn = 0
	IP_API_ECN_ECT0 IPEcn = 1
	IP_API_ECN_ECT1 IPEcn = 2
	IP_API_ECN_CE   IPEcn = 3
)

var (
	IPEcn_name = map[uint8]string{
		0: "IP_API_ECN_NONE",
		1: "IP_API_ECN_ECT0",
		2: "IP_API_ECN_ECT1",
		3: "IP_API_ECN_CE",
	}
	IPEcn_value = map[string]uint8{
		"IP_API_ECN_NONE": 0,
		"IP_API_ECN_ECT0": 1,
		"IP_API_ECN_ECT1": 2,
		"IP_API_ECN_CE":   3,
	}
)

func (x IPEcn) String() string {
	s, ok := IPEcn_name[uint8(x)]
	if ok {
		return s
	}
	return "IPEcn(" + strconv.Itoa(int(x)) + ")"
}

// IPProto defines enum 'ip_proto'.
type IPProto uint32

const (
	IP_API_PROTO_HOPOPT   IPProto = 0
	IP_API_PROTO_ICMP     IPProto = 1
	IP_API_PROTO_IGMP     IPProto = 2
	IP_API_PROTO_TCP      IPProto = 6
	IP_API_PROTO_UDP      IPProto = 17
	IP_API_PROTO_GRE      IPProto = 47
	IP_API_PROTO_AH       IPProto = 50
	IP_API_PROTO_ESP      IPProto = 51
	IP_API_PROTO_EIGRP    IPProto = 88
	IP_API_PROTO_OSPF     IPProto = 89
	IP_API_PROTO_SCTP     IPProto = 132
	IP_API_PROTO_RESERVED IPProto = 255
)

var (
	IPProto_name = map[uint32]string{
		0:   "IP_API_PROTO_HOPOPT",
		1:   "IP_API_PROTO_ICMP",
		2:   "IP_API_PROTO_IGMP",
		6:   "IP_API_PROTO_TCP",
		17:  "IP_API_PROTO_UDP",
		47:  "IP_API_PROTO_GRE",
		50:  "IP_API_PROTO_AH",
		51:  "IP_API_PROTO_ESP",
		88:  "IP_API_PROTO_EIGRP",
		89:  "IP_API_PROTO_OSPF",
		132: "IP_API_PROTO_SCTP",
		255: "IP_API_PROTO_RESERVED",
	}
	IPProto_value = map[string]uint32{
		"IP_API_PROTO_HOPOPT":   0,
		"IP_API_PROTO_ICMP":     1,
		"IP_API_PROTO_IGMP":     2,
		"IP_API_PROTO_TCP":      6,
		"IP_API_PROTO_UDP":      17,
		"IP_API_PROTO_GRE":      47,
		"IP_API_PROTO_AH":       50,
		"IP_API_PROTO_ESP":      51,
		"IP_API_PROTO_EIGRP":    88,
		"IP_API_PROTO_OSPF":     89,
		"IP_API_PROTO_SCTP":     132,
		"IP_API_PROTO_RESERVED": 255,
	}
)

func (x IPProto) String() string {
	s, ok := IPProto_name[uint32(x)]
	if ok {
		return s
	}
	return "IPProto(" + strconv.Itoa(int(x)) + ")"
}

// LinkDuplex defines enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var (
	LinkDuplex_name = map[uint32]string{
		0: "LINK_DUPLEX_API_UNKNOWN",
		1: "LINK_DUPLEX_API_HALF",
		2: "LINK_DUPLEX_API_FULL",
	}
	LinkDuplex_value = map[string]uint32{
		"LINK_DUPLEX_API_UNKNOWN": 0,
		"LINK_DUPLEX_API_HALF":    1,
		"LINK_DUPLEX_API_FULL":    2,
	}
)

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return "LinkDuplex(" + strconv.Itoa(int(x)) + ")"
}

// MtuProto defines enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var (
	MtuProto_name = map[uint32]string{
		1: "MTU_PROTO_API_L3",
		2: "MTU_PROTO_API_IP4",
		3: "MTU_PROTO_API_IP6",
		4: "MTU_PROTO_API_MPLS",
		5: "MTU_PROTO_API_N",
	}
	MtuProto_value = map[string]uint32{
		"MTU_PROTO_API_L3":   1,
		"MTU_PROTO_API_IP4":  2,
		"MTU_PROTO_API_IP6":  3,
		"MTU_PROTO_API_MPLS": 4,
		"MTU_PROTO_API_N":    5,
	}
)

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return "MtuProto(" + strconv.Itoa(int(x)) + ")"
}

// RxMode defines enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var (
	RxMode_name = map[uint32]string{
		0: "RX_MODE_API_UNKNOWN",
		1: "RX_MODE_API_POLLING",
		2: "RX_MODE_API_INTERRUPT",
		3: "RX_MODE_API_ADAPTIVE",
		4: "RX_MODE_API_DEFAULT",
	}
	RxMode_value = map[string]uint32{
		"RX_MODE_API_UNKNOWN":   0,
		"RX_MODE_API_POLLING":   1,
		"RX_MODE_API_INTERRUPT": 2,
		"RX_MODE_API_ADAPTIVE":  3,
		"RX_MODE_API_DEFAULT":   4,
	}
)

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return "RxMode(" + strconv.Itoa(int(x)) + ")"
}

// SubIfFlags defines enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var (
	SubIfFlags_name = map[uint32]string{
		1:   "SUB_IF_API_FLAG_NO_TAGS",
		2:   "SUB_IF_API_FLAG_ONE_TAG",
		4:   "SUB_IF_API_FLAG_TWO_TAGS",
		8:   "SUB_IF_API_FLAG_DOT1AD",
		16:  "SUB_IF_API_FLAG_EXACT_MATCH",
		32:  "SUB_IF_API_FLAG_DEFAULT",
		64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
		128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
		254: "SUB_IF_API_FLAG_MASK_VNET",
		256: "SUB_IF_API_FLAG_DOT1AH",
	}
	SubIfFlags_value = map[string]uint32{
		"SUB_IF_API_FLAG_NO_TAGS":           1,
		"SUB_IF_API_FLAG_ONE_TAG":           2,
		"SUB_IF_API_FLAG_TWO_TAGS":          4,
		"SUB_IF_API_FLAG_DOT1AD":            8,
		"SUB_IF_API_FLAG_EXACT_MATCH":       16,
		"SUB_IF_API_FLAG_DEFAULT":           32,
		"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
		"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
		"SUB_IF_API_FLAG_MASK_VNET":         254,
		"SUB_IF_API_FLAG_DOT1AH":            256,
	}
)

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	str := func(n uint32) string {
		s, ok := SubIfFlags_name[uint32(n)]
		if ok {
			return s
		}
		return "SubIfFlags(" + strconv.Itoa(int(n)) + ")"
	}
	for i := uint32(0); i <= 32; i++ {
		val := uint32(x)
		if val&(1<<i) != 0 {
			if s != "" {
				s += "|"
			}
			s += str(1 << i)
		}
	}
	if s == "" {
		return str(uint32(x))
	}
	return s
}

// AddressWithPrefix defines alias 'address_with_prefix'.
type AddressWithPrefix Prefix

func ParseAddressWithPrefix(s string) (AddressWithPrefix, error) {
	prefix, err := ParsePrefix(s)
	if err != nil {
		return AddressWithPrefix{}, err
	}
	return AddressWithPrefix(prefix), nil
}

func (x AddressWithPrefix) String() string {
	return Prefix(x).String()
}

func (x *AddressWithPrefix) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *AddressWithPrefix) UnmarshalText(text []byte) error {
	prefix, err := ParseAddressWithPrefix(string(text))
	if err != nil {
		return err
	}
	*x = prefix
	return nil
}

// InterfaceIndex defines alias 'interface_index'.
type InterfaceIndex uint32

// IP4Address defines alias 'ip4_address'.
type IP4Address [4]uint8

func ParseIP4Address(s string) (IP4Address, error) {
	ip := net.ParseIP(s).To4()
	if ip == nil {
		return IP4Address{}, fmt.Errorf("invalid IP address: %s", s)
	}
	var ipaddr IP4Address
	copy(ipaddr[:], ip.To4())
	return ipaddr, nil
}

func (x IP4Address) ToIP() net.IP {
	return net.IP(x[:]).To4()
}

func (x IP4Address) String() string {
	return x.ToIP().String()
}

func (x *IP4Address) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *IP4Address) UnmarshalText(text []byte) error {
	ipaddr, err := ParseIP4Address(string(text))
	if err != nil {
		return err
	}
	*x = ipaddr
	return nil
}

// IP4AddressWithPrefix defines alias 'ip4_address_with_prefix'.
type IP4AddressWithPrefix IP4Prefix

// IP6Address defines alias 'ip6_address'.
type IP6Address [16]uint8

func ParseIP6Address(s string) (IP6Address, error) {
	ip := net.ParseIP(s).To16()
	if ip == nil {
		return IP6Address{}, fmt.Errorf("invalid IP address: %s", s)
	}
	var ipaddr IP6Address
	copy(ipaddr[:], ip.To16())
	return ipaddr, nil
}

func (x IP6Address) ToIP() net.IP {
	return net.IP(x[:]).To16()
}

func (x IP6Address) String() string {
	return x.ToIP().String()
}

func (x *IP6Address) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *IP6Address) UnmarshalText(text []byte) error {
	ipaddr, err := ParseIP6Address(string(text))
	if err != nil {
		return err
	}
	*x = ipaddr
	return nil
}

// IP6AddressWithPrefix defines alias 'ip6_address_with_prefix'.
type IP6AddressWithPrefix IP6Prefix

// Address defines type 'address'.
type Address struct {
	Af AddressFamily `binapi:"address_family,name=af" json:"af,omitempty"`
	Un AddressUnion  `binapi:"address_union,name=un" json:"un,omitempty"`
}

func ParseAddress(s string) (Address, error) {
	ip := net.ParseIP(s)
	if ip == nil {
		return Address{}, fmt.Errorf("invalid address: %s", s)
	}
	return AddressFromIP(ip), nil
}

func AddressFromIP(ip net.IP) Address {
	var addr Address
	if ip.To4() == nil {
		addr.Af = ADDRESS_IP6
		var ip6 IP6Address
		copy(ip6[:], ip.To16())
		addr.Un.SetIP6(ip6)
	} else {
		addr.Af = ADDRESS_IP4
		var ip4 IP4Address
		copy(ip4[:], ip.To4())
		addr.Un.SetIP4(ip4)
	}
	return addr
}

func (x Address) ToIP() net.IP {
	if x.Af == ADDRESS_IP6 {
		ip6 := x.Un.GetIP6()
		return net.IP(ip6[:]).To16()
	} else {
		ip4 := x.Un.GetIP4()
		return net.IP(ip4[:]).To4()
	}
}

func (x Address) String() string {
	return x.ToIP().String()
}

func (x *Address) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *Address) UnmarshalText(text []byte) error {
	addr, err := ParseAddress(string(text))
	if err != nil {
		return err
	}
	*x = addr
	return nil
}

// IP4Prefix defines type 'ip4_prefix'.
type IP4Prefix struct {
	Address IP4Address `binapi:"ip4_address,name=address" json:"address,omitempty"`
	Len     uint8      `binapi:"u8,name=len" json:"len,omitempty"`
}

func ParseIP4Prefix(s string) (prefix IP4Prefix, err error) {
	hasPrefix := strings.Contains(s, "/")
	if hasPrefix {
		ip, network, err := net.ParseCIDR(s)
		if err != nil {
			return IP4Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
		maskSize, _ := network.Mask.Size()
		prefix.Len = byte(maskSize)
		prefix.Address, err = ParseIP4Address(ip.String())
		if err != nil {
			return IP4Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
	} else {
		ip := net.ParseIP(s)
		defaultMaskSize, _ := net.CIDRMask(32, 32).Size()
		if ip.To4() == nil {
			defaultMaskSize, _ = net.CIDRMask(128, 128).Size()
		}
		prefix.Len = byte(defaultMaskSize)
		prefix.Address, err = ParseIP4Address(ip.String())
		if err != nil {
			return IP4Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
	}
	return prefix, nil
}

func (x IP4Prefix) ToIPNet() *net.IPNet {
	mask := net.CIDRMask(int(x.Len), 32)
	ipnet := &net.IPNet{IP: x.Address.ToIP(), Mask: mask}
	return ipnet
}

func (x IP4Prefix) String() string {
	ip := x.Address.String()
	return ip + "/" + strconv.Itoa(int(x.Len))
}

func (x *IP4Prefix) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *IP4Prefix) UnmarshalText(text []byte) error {
	prefix, err := ParseIP4Prefix(string(text))
	if err != nil {
		return err
	}
	*x = prefix
	return nil
}

// IP6Prefix defines type 'ip6_prefix'.
type IP6Prefix struct {
	Address IP6Address `binapi:"ip6_address,name=address" json:"address,omitempty"`
	Len     uint8      `binapi:"u8,name=len" json:"len,omitempty"`
}

func ParseIP6Prefix(s string) (prefix IP6Prefix, err error) {
	hasPrefix := strings.Contains(s, "/")
	if hasPrefix {
		ip, network, err := net.ParseCIDR(s)
		if err != nil {
			return IP6Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
		maskSize, _ := network.Mask.Size()
		prefix.Len = byte(maskSize)
		prefix.Address, err = ParseIP6Address(ip.String())
		if err != nil {
			return IP6Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
	} else {
		ip := net.ParseIP(s)
		defaultMaskSize, _ := net.CIDRMask(32, 32).Size()
		if ip.To4() == nil {
			defaultMaskSize, _ = net.CIDRMask(128, 128).Size()
		}
		prefix.Len = byte(defaultMaskSize)
		prefix.Address, err = ParseIP6Address(ip.String())
		if err != nil {
			return IP6Prefix{}, fmt.Errorf("invalid IP %s: %s", s, err)
		}
	}
	return prefix, nil
}

func (x IP6Prefix) ToIPNet() *net.IPNet {
	mask := net.CIDRMask(int(x.Len), 128)
	ipnet := &net.IPNet{IP: x.Address.ToIP(), Mask: mask}
	return ipnet
}

func (x IP6Prefix) String() string {
	ip := x.Address.String()
	return ip + "/" + strconv.Itoa(int(x.Len))
}

func (x *IP6Prefix) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *IP6Prefix) UnmarshalText(text []byte) error {
	prefix, err := ParseIP6Prefix(string(text))
	if err != nil {
		return err
	}
	*x = prefix
	return nil
}

// Mprefix defines type 'mprefix'.
type Mprefix struct {
	Af               AddressFamily `binapi:"address_family,name=af" json:"af,omitempty"`
	GrpAddressLength uint16        `binapi:"u16,name=grp_address_length" json:"grp_address_length,omitempty"`
	GrpAddress       AddressUnion  `binapi:"address_union,name=grp_address" json:"grp_address,omitempty"`
	SrcAddress       AddressUnion  `binapi:"address_union,name=src_address" json:"src_address,omitempty"`
}

// Prefix defines type 'prefix'.
type Prefix struct {
	Address Address `binapi:"address,name=address" json:"address,omitempty"`
	Len     uint8   `binapi:"u8,name=len" json:"len,omitempty"`
}

func ParsePrefix(ip string) (prefix Prefix, err error) {
	hasPrefix := strings.Contains(ip, "/")
	if hasPrefix {
		netIP, network, err := net.ParseCIDR(ip)
		if err != nil {
			return Prefix{}, fmt.Errorf("invalid IP %s: %s", ip, err)
		}
		maskSize, _ := network.Mask.Size()
		prefix.Len = byte(maskSize)
		prefix.Address, err = ParseAddress(netIP.String())
		if err != nil {
			return Prefix{}, fmt.Errorf("invalid IP %s: %s", ip, err)
		}
	} else {
		netIP := net.ParseIP(ip)
		defaultMaskSize, _ := net.CIDRMask(32, 32).Size()
		if netIP.To4() == nil {
			defaultMaskSize, _ = net.CIDRMask(128, 128).Size()
		}
		prefix.Len = byte(defaultMaskSize)
		prefix.Address, err = ParseAddress(netIP.String())
		if err != nil {
			return Prefix{}, fmt.Errorf("invalid IP %s: %s", ip, err)
		}
	}
	return prefix, nil
}

func (x Prefix) ToIPNet() *net.IPNet {
	var mask net.IPMask
	if x.Address.Af == ADDRESS_IP4 {
		mask = net.CIDRMask(int(x.Len), 32)
	} else {
		mask = net.CIDRMask(int(x.Len), 128)
	}
	ipnet := &net.IPNet{IP: x.Address.ToIP(), Mask: mask}
	return ipnet
}

func (x Prefix) String() string {
	ip := x.Address.String()
	return ip + "/" + strconv.Itoa(int(x.Len))
}

func (x *Prefix) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *Prefix) UnmarshalText(text []byte) error {
	prefix, err := ParsePrefix(string(text))
	if err != nil {
		return err
	}
	*x = prefix
	return nil
}

// PrefixMatcher defines type 'prefix_matcher'.
type PrefixMatcher struct {
	Le uint8 `binapi:"u8,name=le" json:"le,omitempty"`
	Ge uint8 `binapi:"u8,name=ge" json:"ge,omitempty"`
}

// AddressUnion defines union 'address_union'.
type AddressUnion struct {
	// AddressUnion can be one of:
	// - IP4 *IP4Address
	// - IP6 *IP6Address
	XXX_UnionData [16]byte
}

func AddressUnionIP4(a IP4Address) (u AddressUnion) {
	u.SetIP4(a)
	return
}
func (u *AddressUnion) SetIP4(a IP4Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeBytes(a[:], 4)
}
func (u *AddressUnion) GetIP4() (a IP4Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	copy(a[:], buf.DecodeBytes(4))
	return
}

func AddressUnionIP6(a IP6Address) (u AddressUnion) {
	u.SetIP6(a)
	return
}
func (u *AddressUnion) SetIP6(a IP6Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	buf.EncodeBytes(a[:], 16)
}
func (u *AddressUnion) GetIP6() (a IP6Address) {
	buf := codec.NewBuffer(u.XXX_UnionData[:])
	copy(a[:], buf.DecodeBytes(16))
	return
}

// Ikev2InitiateDelChildSa defines message 'ikev2_initiate_del_child_sa'.
type Ikev2InitiateDelChildSa struct {
	Ispi uint32 `binapi:"u32,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateDelChildSa) Reset()               { *m = Ikev2InitiateDelChildSa{} }
func (*Ikev2InitiateDelChildSa) GetMessageName() string { return "ikev2_initiate_del_child_sa" }
func (*Ikev2InitiateDelChildSa) GetCrcString() string   { return "7f004d2e" }
func (*Ikev2InitiateDelChildSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2InitiateDelChildSa) GetRetVal() error {
	return nil
}

func (m *Ikev2InitiateDelChildSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Ispi
	return size
}
func (m *Ikev2InitiateDelChildSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelChildSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint32()
	return nil
}

// Ikev2InitiateDelChildSaReply defines message 'ikev2_initiate_del_child_sa_reply'.
type Ikev2InitiateDelChildSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateDelChildSaReply) Reset() { *m = Ikev2InitiateDelChildSaReply{} }
func (*Ikev2InitiateDelChildSaReply) GetMessageName() string {
	return "ikev2_initiate_del_child_sa_reply"
}
func (*Ikev2InitiateDelChildSaReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2InitiateDelChildSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2InitiateDelChildSaReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2InitiateDelChildSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateDelChildSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelChildSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateDelIkeSa defines message 'ikev2_initiate_del_ike_sa'.
type Ikev2InitiateDelIkeSa struct {
	Ispi uint64 `binapi:"u64,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateDelIkeSa) Reset()               { *m = Ikev2InitiateDelIkeSa{} }
func (*Ikev2InitiateDelIkeSa) GetMessageName() string { return "ikev2_initiate_del_ike_sa" }
func (*Ikev2InitiateDelIkeSa) GetCrcString() string   { return "8d125bdd" }
func (*Ikev2InitiateDelIkeSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2InitiateDelIkeSa) GetRetVal() error {
	return nil
}

func (m *Ikev2InitiateDelIkeSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 8 // m.Ispi
	return size
}
func (m *Ikev2InitiateDelIkeSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint64(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelIkeSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint64()
	return nil
}

// Ikev2InitiateDelIkeSaReply defines message 'ikev2_initiate_del_ike_sa_reply'.
type Ikev2InitiateDelIkeSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateDelIkeSaReply) Reset()               { *m = Ikev2InitiateDelIkeSaReply{} }
func (*Ikev2InitiateDelIkeSaReply) GetMessageName() string { return "ikev2_initiate_del_ike_sa_reply" }
func (*Ikev2InitiateDelIkeSaReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2InitiateDelIkeSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2InitiateDelIkeSaReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2InitiateDelIkeSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateDelIkeSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateDelIkeSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateRekeyChildSa defines message 'ikev2_initiate_rekey_child_sa'.
type Ikev2InitiateRekeyChildSa struct {
	Ispi uint32 `binapi:"u32,name=ispi" json:"ispi,omitempty"`
}

func (m *Ikev2InitiateRekeyChildSa) Reset()               { *m = Ikev2InitiateRekeyChildSa{} }
func (*Ikev2InitiateRekeyChildSa) GetMessageName() string { return "ikev2_initiate_rekey_child_sa" }
func (*Ikev2InitiateRekeyChildSa) GetCrcString() string   { return "7f004d2e" }
func (*Ikev2InitiateRekeyChildSa) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2InitiateRekeyChildSa) GetRetVal() error {
	return nil
}

func (m *Ikev2InitiateRekeyChildSa) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Ispi
	return size
}
func (m *Ikev2InitiateRekeyChildSa) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Ispi)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateRekeyChildSa) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Ispi = buf.DecodeUint32()
	return nil
}

// Ikev2InitiateRekeyChildSaReply defines message 'ikev2_initiate_rekey_child_sa_reply'.
type Ikev2InitiateRekeyChildSaReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateRekeyChildSaReply) Reset() { *m = Ikev2InitiateRekeyChildSaReply{} }
func (*Ikev2InitiateRekeyChildSaReply) GetMessageName() string {
	return "ikev2_initiate_rekey_child_sa_reply"
}
func (*Ikev2InitiateRekeyChildSaReply) GetCrcString() string { return "e8d4e804" }
func (*Ikev2InitiateRekeyChildSaReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2InitiateRekeyChildSaReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2InitiateRekeyChildSaReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateRekeyChildSaReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateRekeyChildSaReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2InitiateSaInit defines message 'ikev2_initiate_sa_init'.
type Ikev2InitiateSaInit struct {
	Name string `binapi:"string[64],name=name" json:"name,omitempty"`
}

func (m *Ikev2InitiateSaInit) Reset()               { *m = Ikev2InitiateSaInit{} }
func (*Ikev2InitiateSaInit) GetMessageName() string { return "ikev2_initiate_sa_init" }
func (*Ikev2InitiateSaInit) GetCrcString() string   { return "ebf79a66" }
func (*Ikev2InitiateSaInit) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2InitiateSaInit) GetRetVal() error {
	return nil
}

func (m *Ikev2InitiateSaInit) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	return size
}
func (m *Ikev2InitiateSaInit) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateSaInit) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	return nil
}

// Ikev2InitiateSaInitReply defines message 'ikev2_initiate_sa_init_reply'.
type Ikev2InitiateSaInitReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2InitiateSaInitReply) Reset()               { *m = Ikev2InitiateSaInitReply{} }
func (*Ikev2InitiateSaInitReply) GetMessageName() string { return "ikev2_initiate_sa_init_reply" }
func (*Ikev2InitiateSaInitReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2InitiateSaInitReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2InitiateSaInitReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2InitiateSaInitReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2InitiateSaInitReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2InitiateSaInitReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2PluginGetVersion defines message 'ikev2_plugin_get_version'.
type Ikev2PluginGetVersion struct{}

func (m *Ikev2PluginGetVersion) Reset()               { *m = Ikev2PluginGetVersion{} }
func (*Ikev2PluginGetVersion) GetMessageName() string { return "ikev2_plugin_get_version" }
func (*Ikev2PluginGetVersion) GetCrcString() string   { return "51077d14" }
func (*Ikev2PluginGetVersion) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2PluginGetVersion) GetRetVal() error {
	return nil
}

func (m *Ikev2PluginGetVersion) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *Ikev2PluginGetVersion) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *Ikev2PluginGetVersion) Unmarshal(b []byte) error {
	return nil
}

// Ikev2PluginGetVersionReply defines message 'ikev2_plugin_get_version_reply'.
type Ikev2PluginGetVersionReply struct {
	Major uint32 `binapi:"u32,name=major" json:"major,omitempty"`
	Minor uint32 `binapi:"u32,name=minor" json:"minor,omitempty"`
}

func (m *Ikev2PluginGetVersionReply) Reset()               { *m = Ikev2PluginGetVersionReply{} }
func (*Ikev2PluginGetVersionReply) GetMessageName() string { return "ikev2_plugin_get_version_reply" }
func (*Ikev2PluginGetVersionReply) GetCrcString() string   { return "9b32cf86" }
func (*Ikev2PluginGetVersionReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2PluginGetVersionReply) GetRetVal() error {
	return nil
}

func (m *Ikev2PluginGetVersionReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Major
	size += 4 // m.Minor
	return size
}
func (m *Ikev2PluginGetVersionReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Major)
	buf.EncodeUint32(m.Minor)
	return buf.Bytes(), nil
}
func (m *Ikev2PluginGetVersionReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Major = buf.DecodeUint32()
	m.Minor = buf.DecodeUint32()
	return nil
}

// Ikev2ProfileAddDel defines message 'ikev2_profile_add_del'.
type Ikev2ProfileAddDel struct {
	Name  string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsAdd bool   `binapi:"bool,name=is_add" json:"is_add,omitempty"`
}

func (m *Ikev2ProfileAddDel) Reset()               { *m = Ikev2ProfileAddDel{} }
func (*Ikev2ProfileAddDel) GetMessageName() string { return "ikev2_profile_add_del" }
func (*Ikev2ProfileAddDel) GetCrcString() string   { return "2c925b55" }
func (*Ikev2ProfileAddDel) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2ProfileAddDel) GetRetVal() error {
	return nil
}

func (m *Ikev2ProfileAddDel) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 1  // m.IsAdd
	return size
}
func (m *Ikev2ProfileAddDel) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileAddDel) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsAdd = buf.DecodeBool()
	return nil
}

// Ikev2ProfileAddDelReply defines message 'ikev2_profile_add_del_reply'.
type Ikev2ProfileAddDelReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileAddDelReply) Reset()               { *m = Ikev2ProfileAddDelReply{} }
func (*Ikev2ProfileAddDelReply) GetMessageName() string { return "ikev2_profile_add_del_reply" }
func (*Ikev2ProfileAddDelReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileAddDelReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2ProfileAddDelReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2ProfileAddDelReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileAddDelReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileAddDelReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetAuth defines message 'ikev2_profile_set_auth'.
type Ikev2ProfileSetAuth struct {
	Name       string `binapi:"string[64],name=name" json:"name,omitempty"`
	AuthMethod uint8  `binapi:"u8,name=auth_method" json:"auth_method,omitempty"`
	IsHex      bool   `binapi:"bool,name=is_hex" json:"is_hex,omitempty"`
	DataLen    uint32 `binapi:"u32,name=data_len" json:"-"`
	Data       []byte `binapi:"u8[data_len],name=data" json:"data,omitempty"`
}

func (m *Ikev2ProfileSetAuth) Reset()               { *m = Ikev2ProfileSetAuth{} }
func (*Ikev2ProfileSetAuth) GetMessageName() string { return "ikev2_profile_set_auth" }
func (*Ikev2ProfileSetAuth) GetCrcString() string   { return "642c97cd" }
func (*Ikev2ProfileSetAuth) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2ProfileSetAuth) GetRetVal() error {
	return nil
}

func (m *Ikev2ProfileSetAuth) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64              // m.Name
	size += 1               // m.AuthMethod
	size += 1               // m.IsHex
	size += 4               // m.DataLen
	size += 1 * len(m.Data) // m.Data
	return size
}
func (m *Ikev2ProfileSetAuth) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint8(m.AuthMethod)
	buf.EncodeBool(m.IsHex)
	buf.EncodeUint32(uint32(len(m.Data)))
	buf.EncodeBytes(m.Data, 0)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetAuth) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.AuthMethod = buf.DecodeUint8()
	m.IsHex = buf.DecodeBool()
	m.DataLen = buf.DecodeUint32()
	m.Data = make([]byte, m.DataLen)
	copy(m.Data, buf.DecodeBytes(len(m.Data)))
	return nil
}

// Ikev2ProfileSetAuthReply defines message 'ikev2_profile_set_auth_reply'.
type Ikev2ProfileSetAuthReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetAuthReply) Reset()               { *m = Ikev2ProfileSetAuthReply{} }
func (*Ikev2ProfileSetAuthReply) GetMessageName() string { return "ikev2_profile_set_auth_reply" }
func (*Ikev2ProfileSetAuthReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetAuthReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2ProfileSetAuthReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2ProfileSetAuthReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetAuthReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetAuthReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetID defines message 'ikev2_profile_set_id'.
type Ikev2ProfileSetID struct {
	Name    string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsLocal bool   `binapi:"bool,name=is_local" json:"is_local,omitempty"`
	IDType  uint8  `binapi:"u8,name=id_type" json:"id_type,omitempty"`
	DataLen uint32 `binapi:"u32,name=data_len" json:"-"`
	Data    []byte `binapi:"u8[data_len],name=data" json:"data,omitempty"`
}

func (m *Ikev2ProfileSetID) Reset()               { *m = Ikev2ProfileSetID{} }
func (*Ikev2ProfileSetID) GetMessageName() string { return "ikev2_profile_set_id" }
func (*Ikev2ProfileSetID) GetCrcString() string   { return "4d7e2418" }
func (*Ikev2ProfileSetID) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2ProfileSetID) GetRetVal() error {
	return nil
}

func (m *Ikev2ProfileSetID) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64              // m.Name
	size += 1               // m.IsLocal
	size += 1               // m.IDType
	size += 4               // m.DataLen
	size += 1 * len(m.Data) // m.Data
	return size
}
func (m *Ikev2ProfileSetID) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsLocal)
	buf.EncodeUint8(m.IDType)
	buf.EncodeUint32(uint32(len(m.Data)))
	buf.EncodeBytes(m.Data, 0)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetID) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsLocal = buf.DecodeBool()
	m.IDType = buf.DecodeUint8()
	m.DataLen = buf.DecodeUint32()
	m.Data = make([]byte, m.DataLen)
	copy(m.Data, buf.DecodeBytes(len(m.Data)))
	return nil
}

// Ikev2ProfileSetIDReply defines message 'ikev2_profile_set_id_reply'.
type Ikev2ProfileSetIDReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetIDReply) Reset()               { *m = Ikev2ProfileSetIDReply{} }
func (*Ikev2ProfileSetIDReply) GetMessageName() string { return "ikev2_profile_set_id_reply" }
func (*Ikev2ProfileSetIDReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetIDReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2ProfileSetIDReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2ProfileSetIDReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetIDReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetIDReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2ProfileSetTs defines message 'ikev2_profile_set_ts'.
type Ikev2ProfileSetTs struct {
	Name      string `binapi:"string[64],name=name" json:"name,omitempty"`
	IsLocal   bool   `binapi:"bool,name=is_local" json:"is_local,omitempty"`
	Proto     uint8  `binapi:"u8,name=proto" json:"proto,omitempty"`
	StartPort uint16 `binapi:"u16,name=start_port" json:"start_port,omitempty"`
	EndPort   uint16 `binapi:"u16,name=end_port" json:"end_port,omitempty"`
	StartAddr uint32 `binapi:"u32,name=start_addr" json:"start_addr,omitempty"`
	EndAddr   uint32 `binapi:"u32,name=end_addr" json:"end_addr,omitempty"`
}

func (m *Ikev2ProfileSetTs) Reset()               { *m = Ikev2ProfileSetTs{} }
func (*Ikev2ProfileSetTs) GetMessageName() string { return "ikev2_profile_set_ts" }
func (*Ikev2ProfileSetTs) GetCrcString() string   { return "64d55c16" }
func (*Ikev2ProfileSetTs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2ProfileSetTs) GetRetVal() error {
	return nil
}

func (m *Ikev2ProfileSetTs) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 1  // m.IsLocal
	size += 1  // m.Proto
	size += 2  // m.StartPort
	size += 2  // m.EndPort
	size += 4  // m.StartAddr
	size += 4  // m.EndAddr
	return size
}
func (m *Ikev2ProfileSetTs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeBool(m.IsLocal)
	buf.EncodeUint8(m.Proto)
	buf.EncodeUint16(m.StartPort)
	buf.EncodeUint16(m.EndPort)
	buf.EncodeUint32(m.StartAddr)
	buf.EncodeUint32(m.EndAddr)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetTs) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.IsLocal = buf.DecodeBool()
	m.Proto = buf.DecodeUint8()
	m.StartPort = buf.DecodeUint16()
	m.EndPort = buf.DecodeUint16()
	m.StartAddr = buf.DecodeUint32()
	m.EndAddr = buf.DecodeUint32()
	return nil
}

// Ikev2ProfileSetTsReply defines message 'ikev2_profile_set_ts_reply'.
type Ikev2ProfileSetTsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2ProfileSetTsReply) Reset()               { *m = Ikev2ProfileSetTsReply{} }
func (*Ikev2ProfileSetTsReply) GetMessageName() string { return "ikev2_profile_set_ts_reply" }
func (*Ikev2ProfileSetTsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2ProfileSetTsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2ProfileSetTsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2ProfileSetTsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2ProfileSetTsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2ProfileSetTsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetEspTransforms defines message 'ikev2_set_esp_transforms'.
type Ikev2SetEspTransforms struct {
	Name          string `binapi:"string[64],name=name" json:"name,omitempty"`
	CryptoAlg     uint32 `binapi:"u32,name=crypto_alg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32 `binapi:"u32,name=crypto_key_size" json:"crypto_key_size,omitempty"`
	IntegAlg      uint32 `binapi:"u32,name=integ_alg" json:"integ_alg,omitempty"`
	DhGroup       uint32 `binapi:"u32,name=dh_group" json:"dh_group,omitempty"`
}

func (m *Ikev2SetEspTransforms) Reset()               { *m = Ikev2SetEspTransforms{} }
func (*Ikev2SetEspTransforms) GetMessageName() string { return "ikev2_set_esp_transforms" }
func (*Ikev2SetEspTransforms) GetCrcString() string   { return "936a1a37" }
func (*Ikev2SetEspTransforms) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2SetEspTransforms) GetRetVal() error {
	return nil
}

func (m *Ikev2SetEspTransforms) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 4  // m.CryptoAlg
	size += 4  // m.CryptoKeySize
	size += 4  // m.IntegAlg
	size += 4  // m.DhGroup
	return size
}
func (m *Ikev2SetEspTransforms) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(m.CryptoAlg)
	buf.EncodeUint32(m.CryptoKeySize)
	buf.EncodeUint32(m.IntegAlg)
	buf.EncodeUint32(m.DhGroup)
	return buf.Bytes(), nil
}
func (m *Ikev2SetEspTransforms) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.CryptoAlg = buf.DecodeUint32()
	m.CryptoKeySize = buf.DecodeUint32()
	m.IntegAlg = buf.DecodeUint32()
	m.DhGroup = buf.DecodeUint32()
	return nil
}

// Ikev2SetEspTransformsReply defines message 'ikev2_set_esp_transforms_reply'.
type Ikev2SetEspTransformsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetEspTransformsReply) Reset()               { *m = Ikev2SetEspTransformsReply{} }
func (*Ikev2SetEspTransformsReply) GetMessageName() string { return "ikev2_set_esp_transforms_reply" }
func (*Ikev2SetEspTransformsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetEspTransformsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2SetEspTransformsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2SetEspTransformsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetEspTransformsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetEspTransformsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetIkeTransforms defines message 'ikev2_set_ike_transforms'.
type Ikev2SetIkeTransforms struct {
	Name          string `binapi:"string[64],name=name" json:"name,omitempty"`
	CryptoAlg     uint32 `binapi:"u32,name=crypto_alg" json:"crypto_alg,omitempty"`
	CryptoKeySize uint32 `binapi:"u32,name=crypto_key_size" json:"crypto_key_size,omitempty"`
	IntegAlg      uint32 `binapi:"u32,name=integ_alg" json:"integ_alg,omitempty"`
	DhGroup       uint32 `binapi:"u32,name=dh_group" json:"dh_group,omitempty"`
}

func (m *Ikev2SetIkeTransforms) Reset()               { *m = Ikev2SetIkeTransforms{} }
func (*Ikev2SetIkeTransforms) GetMessageName() string { return "ikev2_set_ike_transforms" }
func (*Ikev2SetIkeTransforms) GetCrcString() string   { return "936a1a37" }
func (*Ikev2SetIkeTransforms) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2SetIkeTransforms) GetRetVal() error {
	return nil
}

func (m *Ikev2SetIkeTransforms) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 4  // m.CryptoAlg
	size += 4  // m.CryptoKeySize
	size += 4  // m.IntegAlg
	size += 4  // m.DhGroup
	return size
}
func (m *Ikev2SetIkeTransforms) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(m.CryptoAlg)
	buf.EncodeUint32(m.CryptoKeySize)
	buf.EncodeUint32(m.IntegAlg)
	buf.EncodeUint32(m.DhGroup)
	return buf.Bytes(), nil
}
func (m *Ikev2SetIkeTransforms) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.CryptoAlg = buf.DecodeUint32()
	m.CryptoKeySize = buf.DecodeUint32()
	m.IntegAlg = buf.DecodeUint32()
	m.DhGroup = buf.DecodeUint32()
	return nil
}

// Ikev2SetIkeTransformsReply defines message 'ikev2_set_ike_transforms_reply'.
type Ikev2SetIkeTransformsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetIkeTransformsReply) Reset()               { *m = Ikev2SetIkeTransformsReply{} }
func (*Ikev2SetIkeTransformsReply) GetMessageName() string { return "ikev2_set_ike_transforms_reply" }
func (*Ikev2SetIkeTransformsReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetIkeTransformsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2SetIkeTransformsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2SetIkeTransformsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetIkeTransformsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetIkeTransformsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetLocalKey defines message 'ikev2_set_local_key'.
type Ikev2SetLocalKey struct {
	KeyFile []byte `binapi:"u8[256],name=key_file" json:"key_file,omitempty"`
}

func (m *Ikev2SetLocalKey) Reset()               { *m = Ikev2SetLocalKey{} }
func (*Ikev2SetLocalKey) GetMessageName() string { return "ikev2_set_local_key" }
func (*Ikev2SetLocalKey) GetCrcString() string   { return "e4996cd5" }
func (*Ikev2SetLocalKey) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2SetLocalKey) GetRetVal() error {
	return nil
}

func (m *Ikev2SetLocalKey) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 * 256 // m.KeyFile
	return size
}
func (m *Ikev2SetLocalKey) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBytes(m.KeyFile, 256)
	return buf.Bytes(), nil
}
func (m *Ikev2SetLocalKey) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.KeyFile = make([]byte, 256)
	copy(m.KeyFile, buf.DecodeBytes(len(m.KeyFile)))
	return nil
}

// Ikev2SetLocalKeyReply defines message 'ikev2_set_local_key_reply'.
type Ikev2SetLocalKeyReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetLocalKeyReply) Reset()               { *m = Ikev2SetLocalKeyReply{} }
func (*Ikev2SetLocalKeyReply) GetMessageName() string { return "ikev2_set_local_key_reply" }
func (*Ikev2SetLocalKeyReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetLocalKeyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2SetLocalKeyReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2SetLocalKeyReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetLocalKeyReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetLocalKeyReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetResponder defines message 'ikev2_set_responder'.
type Ikev2SetResponder struct {
	Name      string         `binapi:"string[64],name=name" json:"name,omitempty"`
	SwIfIndex InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Address   IP4Address     `binapi:"ip4_address,name=address" json:"address,omitempty"`
}

func (m *Ikev2SetResponder) Reset()               { *m = Ikev2SetResponder{} }
func (*Ikev2SetResponder) GetMessageName() string { return "ikev2_set_responder" }
func (*Ikev2SetResponder) GetCrcString() string   { return "f0d3dc80" }
func (*Ikev2SetResponder) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2SetResponder) GetRetVal() error {
	return nil
}

func (m *Ikev2SetResponder) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64    // m.Name
	size += 4     // m.SwIfIndex
	size += 1 * 4 // m.Address
	return size
}
func (m *Ikev2SetResponder) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint32(uint32(m.SwIfIndex))
	buf.EncodeBytes(m.Address[:], 4)
	return buf.Bytes(), nil
}
func (m *Ikev2SetResponder) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.SwIfIndex = InterfaceIndex(buf.DecodeUint32())
	copy(m.Address[:], buf.DecodeBytes(4))
	return nil
}

// Ikev2SetResponderReply defines message 'ikev2_set_responder_reply'.
type Ikev2SetResponderReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetResponderReply) Reset()               { *m = Ikev2SetResponderReply{} }
func (*Ikev2SetResponderReply) GetMessageName() string { return "ikev2_set_responder_reply" }
func (*Ikev2SetResponderReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetResponderReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2SetResponderReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2SetResponderReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetResponderReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetResponderReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// Ikev2SetSaLifetime defines message 'ikev2_set_sa_lifetime'.
type Ikev2SetSaLifetime struct {
	Name            string `binapi:"string[64],name=name" json:"name,omitempty"`
	Lifetime        uint64 `binapi:"u64,name=lifetime" json:"lifetime,omitempty"`
	LifetimeJitter  uint32 `binapi:"u32,name=lifetime_jitter" json:"lifetime_jitter,omitempty"`
	Handover        uint32 `binapi:"u32,name=handover" json:"handover,omitempty"`
	LifetimeMaxdata uint64 `binapi:"u64,name=lifetime_maxdata" json:"lifetime_maxdata,omitempty"`
}

func (m *Ikev2SetSaLifetime) Reset()               { *m = Ikev2SetSaLifetime{} }
func (*Ikev2SetSaLifetime) GetMessageName() string { return "ikev2_set_sa_lifetime" }
func (*Ikev2SetSaLifetime) GetCrcString() string   { return "7039feaa" }
func (*Ikev2SetSaLifetime) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *Ikev2SetSaLifetime) GetRetVal() error {
	return nil
}

func (m *Ikev2SetSaLifetime) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 64 // m.Name
	size += 8  // m.Lifetime
	size += 4  // m.LifetimeJitter
	size += 4  // m.Handover
	size += 8  // m.LifetimeMaxdata
	return size
}
func (m *Ikev2SetSaLifetime) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeString(m.Name, 64)
	buf.EncodeUint64(m.Lifetime)
	buf.EncodeUint32(m.LifetimeJitter)
	buf.EncodeUint32(m.Handover)
	buf.EncodeUint64(m.LifetimeMaxdata)
	return buf.Bytes(), nil
}
func (m *Ikev2SetSaLifetime) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Name = buf.DecodeString(64)
	m.Lifetime = buf.DecodeUint64()
	m.LifetimeJitter = buf.DecodeUint32()
	m.Handover = buf.DecodeUint32()
	m.LifetimeMaxdata = buf.DecodeUint64()
	return nil
}

// Ikev2SetSaLifetimeReply defines message 'ikev2_set_sa_lifetime_reply'.
type Ikev2SetSaLifetimeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *Ikev2SetSaLifetimeReply) Reset()               { *m = Ikev2SetSaLifetimeReply{} }
func (*Ikev2SetSaLifetimeReply) GetMessageName() string { return "ikev2_set_sa_lifetime_reply" }
func (*Ikev2SetSaLifetimeReply) GetCrcString() string   { return "e8d4e804" }
func (*Ikev2SetSaLifetimeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *Ikev2SetSaLifetimeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *Ikev2SetSaLifetimeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *Ikev2SetSaLifetimeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *Ikev2SetSaLifetimeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_ikev2_binapi_init() }
func file_ikev2_binapi_init() {
	api.RegisterMessage((*Ikev2InitiateDelChildSa)(nil), "ikev2_initiate_del_child_sa_7f004d2e")
	api.RegisterMessage((*Ikev2InitiateDelChildSaReply)(nil), "ikev2_initiate_del_child_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateDelIkeSa)(nil), "ikev2_initiate_del_ike_sa_8d125bdd")
	api.RegisterMessage((*Ikev2InitiateDelIkeSaReply)(nil), "ikev2_initiate_del_ike_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateRekeyChildSa)(nil), "ikev2_initiate_rekey_child_sa_7f004d2e")
	api.RegisterMessage((*Ikev2InitiateRekeyChildSaReply)(nil), "ikev2_initiate_rekey_child_sa_reply_e8d4e804")
	api.RegisterMessage((*Ikev2InitiateSaInit)(nil), "ikev2_initiate_sa_init_ebf79a66")
	api.RegisterMessage((*Ikev2InitiateSaInitReply)(nil), "ikev2_initiate_sa_init_reply_e8d4e804")
	api.RegisterMessage((*Ikev2PluginGetVersion)(nil), "ikev2_plugin_get_version_51077d14")
	api.RegisterMessage((*Ikev2PluginGetVersionReply)(nil), "ikev2_plugin_get_version_reply_9b32cf86")
	api.RegisterMessage((*Ikev2ProfileAddDel)(nil), "ikev2_profile_add_del_2c925b55")
	api.RegisterMessage((*Ikev2ProfileAddDelReply)(nil), "ikev2_profile_add_del_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetAuth)(nil), "ikev2_profile_set_auth_642c97cd")
	api.RegisterMessage((*Ikev2ProfileSetAuthReply)(nil), "ikev2_profile_set_auth_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetID)(nil), "ikev2_profile_set_id_4d7e2418")
	api.RegisterMessage((*Ikev2ProfileSetIDReply)(nil), "ikev2_profile_set_id_reply_e8d4e804")
	api.RegisterMessage((*Ikev2ProfileSetTs)(nil), "ikev2_profile_set_ts_64d55c16")
	api.RegisterMessage((*Ikev2ProfileSetTsReply)(nil), "ikev2_profile_set_ts_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetEspTransforms)(nil), "ikev2_set_esp_transforms_936a1a37")
	api.RegisterMessage((*Ikev2SetEspTransformsReply)(nil), "ikev2_set_esp_transforms_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetIkeTransforms)(nil), "ikev2_set_ike_transforms_936a1a37")
	api.RegisterMessage((*Ikev2SetIkeTransformsReply)(nil), "ikev2_set_ike_transforms_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetLocalKey)(nil), "ikev2_set_local_key_e4996cd5")
	api.RegisterMessage((*Ikev2SetLocalKeyReply)(nil), "ikev2_set_local_key_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetResponder)(nil), "ikev2_set_responder_f0d3dc80")
	api.RegisterMessage((*Ikev2SetResponderReply)(nil), "ikev2_set_responder_reply_e8d4e804")
	api.RegisterMessage((*Ikev2SetSaLifetime)(nil), "ikev2_set_sa_lifetime_7039feaa")
	api.RegisterMessage((*Ikev2SetSaLifetimeReply)(nil), "ikev2_set_sa_lifetime_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*Ikev2InitiateDelChildSa)(nil),
		(*Ikev2InitiateDelChildSaReply)(nil),
		(*Ikev2InitiateDelIkeSa)(nil),
		(*Ikev2InitiateDelIkeSaReply)(nil),
		(*Ikev2InitiateRekeyChildSa)(nil),
		(*Ikev2InitiateRekeyChildSaReply)(nil),
		(*Ikev2InitiateSaInit)(nil),
		(*Ikev2InitiateSaInitReply)(nil),
		(*Ikev2PluginGetVersion)(nil),
		(*Ikev2PluginGetVersionReply)(nil),
		(*Ikev2ProfileAddDel)(nil),
		(*Ikev2ProfileAddDelReply)(nil),
		(*Ikev2ProfileSetAuth)(nil),
		(*Ikev2ProfileSetAuthReply)(nil),
		(*Ikev2ProfileSetID)(nil),
		(*Ikev2ProfileSetIDReply)(nil),
		(*Ikev2ProfileSetTs)(nil),
		(*Ikev2ProfileSetTsReply)(nil),
		(*Ikev2SetEspTransforms)(nil),
		(*Ikev2SetEspTransformsReply)(nil),
		(*Ikev2SetIkeTransforms)(nil),
		(*Ikev2SetIkeTransformsReply)(nil),
		(*Ikev2SetLocalKey)(nil),
		(*Ikev2SetLocalKeyReply)(nil),
		(*Ikev2SetResponder)(nil),
		(*Ikev2SetResponderReply)(nil),
		(*Ikev2SetSaLifetime)(nil),
		(*Ikev2SetSaLifetimeReply)(nil),
	}
}
