// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.5.0-dev
//  VPP:              20.01
// source: .vppapi/core/lisp.api.json

// Package lisp contains generated bindings for API file lisp.api.
//
// Contents:
//   3 structs
//  60 messages
//
package lisp

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "lisp"
	APIVersion = "1.0.0"
	VersionCrc = 0x681568f8
)

// LispAdjacency defines type 'lisp_adjacency'.
type LispAdjacency struct {
	EidType       uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Reid          []byte `binapi:"u8[16],name=reid" json:"reid,omitempty"`
	Leid          []byte `binapi:"u8[16],name=leid" json:"leid,omitempty"`
	ReidPrefixLen uint8  `binapi:"u8,name=reid_prefix_len" json:"reid_prefix_len,omitempty"`
	LeidPrefixLen uint8  `binapi:"u8,name=leid_prefix_len" json:"leid_prefix_len,omitempty"`
}

// LocalLocator defines type 'local_locator'.
type LocalLocator struct {
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	Priority  uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight    uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

// RemoteLocator defines type 'remote_locator'.
type RemoteLocator struct {
	IsIP4    uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Priority uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight   uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
	Addr     []byte `binapi:"u8[16],name=addr" json:"addr,omitempty"`
}

// LispAddDelAdjacency defines message 'lisp_add_del_adjacency'.
type LispAddDelAdjacency struct {
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	EidType uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Reid    []byte `binapi:"u8[16],name=reid" json:"reid,omitempty"`
	Leid    []byte `binapi:"u8[16],name=leid" json:"leid,omitempty"`
	ReidLen uint8  `binapi:"u8,name=reid_len" json:"reid_len,omitempty"`
	LeidLen uint8  `binapi:"u8,name=leid_len" json:"leid_len,omitempty"`
}

func (m *LispAddDelAdjacency) Reset()               { *m = LispAddDelAdjacency{} }
func (*LispAddDelAdjacency) GetMessageName() string { return "lisp_add_del_adjacency" }
func (*LispAddDelAdjacency) GetCrcString() string   { return "f047390d" }
func (*LispAddDelAdjacency) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelAdjacency) GetRetVal() error {
	return nil
}

func (m *LispAddDelAdjacency) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 4      // m.Vni
	size += 1      // m.EidType
	size += 1 * 16 // m.Reid
	size += 1 * 16 // m.Leid
	size += 1      // m.ReidLen
	size += 1      // m.LeidLen
	return size
}
func (m *LispAddDelAdjacency) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Reid, 16)
	buf.EncodeBytes(m.Leid, 16)
	buf.EncodeUint8(m.ReidLen)
	buf.EncodeUint8(m.LeidLen)
	return buf.Bytes(), nil
}
func (m *LispAddDelAdjacency) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.EidType = buf.DecodeUint8()
	m.Reid = make([]byte, 16)
	copy(m.Reid, buf.DecodeBytes(len(m.Reid)))
	m.Leid = make([]byte, 16)
	copy(m.Leid, buf.DecodeBytes(len(m.Leid)))
	m.ReidLen = buf.DecodeUint8()
	m.LeidLen = buf.DecodeUint8()
	return nil
}

// LispAddDelAdjacencyReply defines message 'lisp_add_del_adjacency_reply'.
type LispAddDelAdjacencyReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelAdjacencyReply) Reset()               { *m = LispAddDelAdjacencyReply{} }
func (*LispAddDelAdjacencyReply) GetMessageName() string { return "lisp_add_del_adjacency_reply" }
func (*LispAddDelAdjacencyReply) GetCrcString() string   { return "e8d4e804" }
func (*LispAddDelAdjacencyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelAdjacencyReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelAdjacencyReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelAdjacencyReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelAdjacencyReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelLocalEid defines message 'lisp_add_del_local_eid'.
type LispAddDelLocalEid struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	EidType        uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid            []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	PrefixLen      uint8  `binapi:"u8,name=prefix_len" json:"prefix_len,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	Vni            uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	KeyID          uint16 `binapi:"u16,name=key_id" json:"key_id,omitempty"`
	Key            []byte `binapi:"u8[64],name=key" json:"key,omitempty"`
}

func (m *LispAddDelLocalEid) Reset()               { *m = LispAddDelLocalEid{} }
func (*LispAddDelLocalEid) GetMessageName() string { return "lisp_add_del_local_eid" }
func (*LispAddDelLocalEid) GetCrcString() string   { return "e6d00717" }
func (*LispAddDelLocalEid) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelLocalEid) GetRetVal() error {
	return nil
}

func (m *LispAddDelLocalEid) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.PrefixLen
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.Vni
	size += 2      // m.KeyID
	size += 1 * 64 // m.Key
	return size
}
func (m *LispAddDelLocalEid) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.PrefixLen)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint16(m.KeyID)
	buf.EncodeBytes(m.Key, 64)
	return buf.Bytes(), nil
}
func (m *LispAddDelLocalEid) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.PrefixLen = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.Vni = buf.DecodeUint32()
	m.KeyID = buf.DecodeUint16()
	m.Key = make([]byte, 64)
	copy(m.Key, buf.DecodeBytes(len(m.Key)))
	return nil
}

// LispAddDelLocalEidReply defines message 'lisp_add_del_local_eid_reply'.
type LispAddDelLocalEidReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelLocalEidReply) Reset()               { *m = LispAddDelLocalEidReply{} }
func (*LispAddDelLocalEidReply) GetMessageName() string { return "lisp_add_del_local_eid_reply" }
func (*LispAddDelLocalEidReply) GetCrcString() string   { return "e8d4e804" }
func (*LispAddDelLocalEidReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelLocalEidReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelLocalEidReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelLocalEidReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelLocalEidReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelLocator defines message 'lisp_add_del_locator'.
type LispAddDelLocator struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	SwIfIndex      uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	Priority       uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight         uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

func (m *LispAddDelLocator) Reset()               { *m = LispAddDelLocator{} }
func (*LispAddDelLocator) GetMessageName() string { return "lisp_add_del_locator" }
func (*LispAddDelLocator) GetCrcString() string   { return "006a4240" }
func (*LispAddDelLocator) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelLocator) GetRetVal() error {
	return nil
}

func (m *LispAddDelLocator) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.SwIfIndex
	size += 1      // m.Priority
	size += 1      // m.Weight
	return size
}
func (m *LispAddDelLocator) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.Priority)
	buf.EncodeUint8(m.Weight)
	return buf.Bytes(), nil
}
func (m *LispAddDelLocator) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.SwIfIndex = buf.DecodeUint32()
	m.Priority = buf.DecodeUint8()
	m.Weight = buf.DecodeUint8()
	return nil
}

// LispAddDelLocatorReply defines message 'lisp_add_del_locator_reply'.
type LispAddDelLocatorReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelLocatorReply) Reset()               { *m = LispAddDelLocatorReply{} }
func (*LispAddDelLocatorReply) GetMessageName() string { return "lisp_add_del_locator_reply" }
func (*LispAddDelLocatorReply) GetCrcString() string   { return "e8d4e804" }
func (*LispAddDelLocatorReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelLocatorReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelLocatorReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelLocatorReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelLocatorReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelLocatorSet defines message 'lisp_add_del_locator_set'.
type LispAddDelLocatorSet struct {
	IsAdd          uint8          `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte         `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	LocatorNum     uint32         `binapi:"u32,name=locator_num" json:"-"`
	Locators       []LocalLocator `binapi:"local_locator[locator_num],name=locators" json:"locators,omitempty"`
}

func (m *LispAddDelLocatorSet) Reset()               { *m = LispAddDelLocatorSet{} }
func (*LispAddDelLocatorSet) GetMessageName() string { return "lisp_add_del_locator_set" }
func (*LispAddDelLocatorSet) GetCrcString() string   { return "06968e38" }
func (*LispAddDelLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelLocatorSet) GetRetVal() error {
	return nil
}

func (m *LispAddDelLocatorSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.LocatorNum
	for j1 := 0; j1 < len(m.Locators); j1++ {
		var s1 LocalLocator
		_ = s1
		if j1 < len(m.Locators) {
			s1 = m.Locators[j1]
		}
		size += 4 // s1.SwIfIndex
		size += 1 // s1.Priority
		size += 1 // s1.Weight
	}
	return size
}
func (m *LispAddDelLocatorSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(uint32(len(m.Locators)))
	for j0 := 0; j0 < len(m.Locators); j0++ {
		var v0 LocalLocator // Locators
		if j0 < len(m.Locators) {
			v0 = m.Locators[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint8(v0.Priority)
		buf.EncodeUint8(v0.Weight)
	}
	return buf.Bytes(), nil
}
func (m *LispAddDelLocatorSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.LocatorNum = buf.DecodeUint32()
	m.Locators = make([]LocalLocator, m.LocatorNum)
	for j0 := 0; j0 < len(m.Locators); j0++ {
		m.Locators[j0].SwIfIndex = buf.DecodeUint32()
		m.Locators[j0].Priority = buf.DecodeUint8()
		m.Locators[j0].Weight = buf.DecodeUint8()
	}
	return nil
}

// LispAddDelLocatorSetReply defines message 'lisp_add_del_locator_set_reply'.
type LispAddDelLocatorSetReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	LsIndex uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
}

func (m *LispAddDelLocatorSetReply) Reset()               { *m = LispAddDelLocatorSetReply{} }
func (*LispAddDelLocatorSetReply) GetMessageName() string { return "lisp_add_del_locator_set_reply" }
func (*LispAddDelLocatorSetReply) GetCrcString() string   { return "b6666db4" }
func (*LispAddDelLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelLocatorSetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelLocatorSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.LsIndex
	return size
}
func (m *LispAddDelLocatorSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.LsIndex)
	return buf.Bytes(), nil
}
func (m *LispAddDelLocatorSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.LsIndex = buf.DecodeUint32()
	return nil
}

// LispAddDelMapRequestItrRlocs defines message 'lisp_add_del_map_request_itr_rlocs'.
type LispAddDelMapRequestItrRlocs struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *LispAddDelMapRequestItrRlocs) Reset() { *m = LispAddDelMapRequestItrRlocs{} }
func (*LispAddDelMapRequestItrRlocs) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs"
}
func (*LispAddDelMapRequestItrRlocs) GetCrcString() string { return "c7c6cb2f" }
func (*LispAddDelMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelMapRequestItrRlocs) GetRetVal() error {
	return nil
}

func (m *LispAddDelMapRequestItrRlocs) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *LispAddDelMapRequestItrRlocs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapRequestItrRlocs) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// LispAddDelMapRequestItrRlocsReply defines message 'lisp_add_del_map_request_itr_rlocs_reply'.
type LispAddDelMapRequestItrRlocsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelMapRequestItrRlocsReply) Reset() { *m = LispAddDelMapRequestItrRlocsReply{} }
func (*LispAddDelMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_add_del_map_request_itr_rlocs_reply"
}
func (*LispAddDelMapRequestItrRlocsReply) GetCrcString() string { return "e8d4e804" }
func (*LispAddDelMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelMapRequestItrRlocsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelMapRequestItrRlocsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelMapRequestItrRlocsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapRequestItrRlocsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelMapResolver defines message 'lisp_add_del_map_resolver'.
type LispAddDelMapResolver struct {
	IsAdd     uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *LispAddDelMapResolver) Reset()               { *m = LispAddDelMapResolver{} }
func (*LispAddDelMapResolver) GetMessageName() string { return "lisp_add_del_map_resolver" }
func (*LispAddDelMapResolver) GetCrcString() string   { return "0ebcd37d" }
func (*LispAddDelMapResolver) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelMapResolver) GetRetVal() error {
	return nil
}

func (m *LispAddDelMapResolver) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *LispAddDelMapResolver) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapResolver) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// LispAddDelMapResolverReply defines message 'lisp_add_del_map_resolver_reply'.
type LispAddDelMapResolverReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelMapResolverReply) Reset()               { *m = LispAddDelMapResolverReply{} }
func (*LispAddDelMapResolverReply) GetMessageName() string { return "lisp_add_del_map_resolver_reply" }
func (*LispAddDelMapResolverReply) GetCrcString() string   { return "e8d4e804" }
func (*LispAddDelMapResolverReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelMapResolverReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelMapResolverReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelMapResolverReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapResolverReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelMapServer defines message 'lisp_add_del_map_server'.
type LispAddDelMapServer struct {
	IsAdd     uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *LispAddDelMapServer) Reset()               { *m = LispAddDelMapServer{} }
func (*LispAddDelMapServer) GetMessageName() string { return "lisp_add_del_map_server" }
func (*LispAddDelMapServer) GetCrcString() string   { return "0ebcd37d" }
func (*LispAddDelMapServer) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelMapServer) GetRetVal() error {
	return nil
}

func (m *LispAddDelMapServer) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *LispAddDelMapServer) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapServer) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// LispAddDelMapServerReply defines message 'lisp_add_del_map_server_reply'.
type LispAddDelMapServerReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelMapServerReply) Reset()               { *m = LispAddDelMapServerReply{} }
func (*LispAddDelMapServerReply) GetMessageName() string { return "lisp_add_del_map_server_reply" }
func (*LispAddDelMapServerReply) GetCrcString() string   { return "e8d4e804" }
func (*LispAddDelMapServerReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelMapServerReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelMapServerReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelMapServerReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelMapServerReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAddDelRemoteMapping defines message 'lisp_add_del_remote_mapping'.
type LispAddDelRemoteMapping struct {
	IsAdd    uint8           `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsSrcDst uint8           `binapi:"u8,name=is_src_dst" json:"is_src_dst,omitempty"`
	DelAll   uint8           `binapi:"u8,name=del_all" json:"del_all,omitempty"`
	Vni      uint32          `binapi:"u32,name=vni" json:"vni,omitempty"`
	Action   uint8           `binapi:"u8,name=action" json:"action,omitempty"`
	EidType  uint8           `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid      []byte          `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	EidLen   uint8           `binapi:"u8,name=eid_len" json:"eid_len,omitempty"`
	Seid     []byte          `binapi:"u8[16],name=seid" json:"seid,omitempty"`
	SeidLen  uint8           `binapi:"u8,name=seid_len" json:"seid_len,omitempty"`
	RlocNum  uint32          `binapi:"u32,name=rloc_num" json:"-"`
	Rlocs    []RemoteLocator `binapi:"remote_locator[rloc_num],name=rlocs" json:"rlocs,omitempty"`
}

func (m *LispAddDelRemoteMapping) Reset()               { *m = LispAddDelRemoteMapping{} }
func (*LispAddDelRemoteMapping) GetMessageName() string { return "lisp_add_del_remote_mapping" }
func (*LispAddDelRemoteMapping) GetCrcString() string   { return "b879c3a9" }
func (*LispAddDelRemoteMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAddDelRemoteMapping) GetRetVal() error {
	return nil
}

func (m *LispAddDelRemoteMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsSrcDst
	size += 1      // m.DelAll
	size += 4      // m.Vni
	size += 1      // m.Action
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.EidLen
	size += 1 * 16 // m.Seid
	size += 1      // m.SeidLen
	size += 4      // m.RlocNum
	for j1 := 0; j1 < len(m.Rlocs); j1++ {
		var s1 RemoteLocator
		_ = s1
		if j1 < len(m.Rlocs) {
			s1 = m.Rlocs[j1]
		}
		size += 1      // s1.IsIP4
		size += 1      // s1.Priority
		size += 1      // s1.Weight
		size += 1 * 16 // s1.Addr
	}
	return size
}
func (m *LispAddDelRemoteMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsSrcDst)
	buf.EncodeUint8(m.DelAll)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.Action)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.EidLen)
	buf.EncodeBytes(m.Seid, 16)
	buf.EncodeUint8(m.SeidLen)
	buf.EncodeUint32(uint32(len(m.Rlocs)))
	for j0 := 0; j0 < len(m.Rlocs); j0++ {
		var v0 RemoteLocator // Rlocs
		if j0 < len(m.Rlocs) {
			v0 = m.Rlocs[j0]
		}
		buf.EncodeUint8(v0.IsIP4)
		buf.EncodeUint8(v0.Priority)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeBytes(v0.Addr, 16)
	}
	return buf.Bytes(), nil
}
func (m *LispAddDelRemoteMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsSrcDst = buf.DecodeUint8()
	m.DelAll = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.Action = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.EidLen = buf.DecodeUint8()
	m.Seid = make([]byte, 16)
	copy(m.Seid, buf.DecodeBytes(len(m.Seid)))
	m.SeidLen = buf.DecodeUint8()
	m.RlocNum = buf.DecodeUint32()
	m.Rlocs = make([]RemoteLocator, m.RlocNum)
	for j0 := 0; j0 < len(m.Rlocs); j0++ {
		m.Rlocs[j0].IsIP4 = buf.DecodeUint8()
		m.Rlocs[j0].Priority = buf.DecodeUint8()
		m.Rlocs[j0].Weight = buf.DecodeUint8()
		m.Rlocs[j0].Addr = make([]byte, 16)
		copy(m.Rlocs[j0].Addr, buf.DecodeBytes(len(m.Rlocs[j0].Addr)))
	}
	return nil
}

// LispAddDelRemoteMappingReply defines message 'lisp_add_del_remote_mapping_reply'.
type LispAddDelRemoteMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispAddDelRemoteMappingReply) Reset() { *m = LispAddDelRemoteMappingReply{} }
func (*LispAddDelRemoteMappingReply) GetMessageName() string {
	return "lisp_add_del_remote_mapping_reply"
}
func (*LispAddDelRemoteMappingReply) GetCrcString() string { return "e8d4e804" }
func (*LispAddDelRemoteMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAddDelRemoteMappingReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAddDelRemoteMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispAddDelRemoteMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispAddDelRemoteMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispAdjacenciesGet defines message 'lisp_adjacencies_get'.
type LispAdjacenciesGet struct {
	Vni uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
}

func (m *LispAdjacenciesGet) Reset()               { *m = LispAdjacenciesGet{} }
func (*LispAdjacenciesGet) GetMessageName() string { return "lisp_adjacencies_get" }
func (*LispAdjacenciesGet) GetCrcString() string   { return "8d1f2fe9" }
func (*LispAdjacenciesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispAdjacenciesGet) GetRetVal() error {
	return nil
}

func (m *LispAdjacenciesGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	return size
}
func (m *LispAdjacenciesGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	return buf.Bytes(), nil
}
func (m *LispAdjacenciesGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	return nil
}

// LispAdjacenciesGetReply defines message 'lisp_adjacencies_get_reply'.
type LispAdjacenciesGetReply struct {
	Retval      int32           `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count       uint32          `binapi:"u32,name=count" json:"-"`
	Adjacencies []LispAdjacency `binapi:"lisp_adjacency[count],name=adjacencies" json:"adjacencies,omitempty"`
}

func (m *LispAdjacenciesGetReply) Reset()               { *m = LispAdjacenciesGetReply{} }
func (*LispAdjacenciesGetReply) GetMessageName() string { return "lisp_adjacencies_get_reply" }
func (*LispAdjacenciesGetReply) GetCrcString() string   { return "ada0f464" }
func (*LispAdjacenciesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispAdjacenciesGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispAdjacenciesGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Adjacencies); j1++ {
		var s1 LispAdjacency
		_ = s1
		if j1 < len(m.Adjacencies) {
			s1 = m.Adjacencies[j1]
		}
		size += 1      // s1.EidType
		size += 1 * 16 // s1.Reid
		size += 1 * 16 // s1.Leid
		size += 1      // s1.ReidPrefixLen
		size += 1      // s1.LeidPrefixLen
	}
	return size
}
func (m *LispAdjacenciesGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Adjacencies)))
	for j0 := 0; j0 < len(m.Adjacencies); j0++ {
		var v0 LispAdjacency // Adjacencies
		if j0 < len(m.Adjacencies) {
			v0 = m.Adjacencies[j0]
		}
		buf.EncodeUint8(v0.EidType)
		buf.EncodeBytes(v0.Reid, 16)
		buf.EncodeBytes(v0.Leid, 16)
		buf.EncodeUint8(v0.ReidPrefixLen)
		buf.EncodeUint8(v0.LeidPrefixLen)
	}
	return buf.Bytes(), nil
}
func (m *LispAdjacenciesGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.Adjacencies = make([]LispAdjacency, m.Count)
	for j0 := 0; j0 < len(m.Adjacencies); j0++ {
		m.Adjacencies[j0].EidType = buf.DecodeUint8()
		m.Adjacencies[j0].Reid = make([]byte, 16)
		copy(m.Adjacencies[j0].Reid, buf.DecodeBytes(len(m.Adjacencies[j0].Reid)))
		m.Adjacencies[j0].Leid = make([]byte, 16)
		copy(m.Adjacencies[j0].Leid, buf.DecodeBytes(len(m.Adjacencies[j0].Leid)))
		m.Adjacencies[j0].ReidPrefixLen = buf.DecodeUint8()
		m.Adjacencies[j0].LeidPrefixLen = buf.DecodeUint8()
	}
	return nil
}

// LispEidTableAddDelMap defines message 'lisp_eid_table_add_del_map'.
type LispEidTableAddDelMap struct {
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	DpTable uint32 `binapi:"u32,name=dp_table" json:"dp_table,omitempty"`
	IsL2    uint8  `binapi:"u8,name=is_l2" json:"is_l2,omitempty"`
}

func (m *LispEidTableAddDelMap) Reset()               { *m = LispEidTableAddDelMap{} }
func (*LispEidTableAddDelMap) GetMessageName() string { return "lisp_eid_table_add_del_map" }
func (*LispEidTableAddDelMap) GetCrcString() string   { return "59e9975e" }
func (*LispEidTableAddDelMap) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispEidTableAddDelMap) GetRetVal() error {
	return nil
}

func (m *LispEidTableAddDelMap) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.Vni
	size += 4 // m.DpTable
	size += 1 // m.IsL2
	return size
}
func (m *LispEidTableAddDelMap) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint32(m.DpTable)
	buf.EncodeUint8(m.IsL2)
	return buf.Bytes(), nil
}
func (m *LispEidTableAddDelMap) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.DpTable = buf.DecodeUint32()
	m.IsL2 = buf.DecodeUint8()
	return nil
}

// LispEidTableAddDelMapReply defines message 'lisp_eid_table_add_del_map_reply'.
type LispEidTableAddDelMapReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispEidTableAddDelMapReply) Reset()               { *m = LispEidTableAddDelMapReply{} }
func (*LispEidTableAddDelMapReply) GetMessageName() string { return "lisp_eid_table_add_del_map_reply" }
func (*LispEidTableAddDelMapReply) GetCrcString() string   { return "e8d4e804" }
func (*LispEidTableAddDelMapReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispEidTableAddDelMapReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispEidTableAddDelMapReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispEidTableAddDelMapReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispEidTableAddDelMapReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispEidTableDetails defines message 'lisp_eid_table_details'.
type LispEidTableDetails struct {
	LocatorSetIndex uint32 `binapi:"u32,name=locator_set_index" json:"locator_set_index,omitempty"`
	Action          uint8  `binapi:"u8,name=action" json:"action,omitempty"`
	IsLocal         uint8  `binapi:"u8,name=is_local" json:"is_local,omitempty"`
	EidType         uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	IsSrcDst        uint8  `binapi:"u8,name=is_src_dst" json:"is_src_dst,omitempty"`
	Vni             uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	Eid             []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	EidPrefixLen    uint8  `binapi:"u8,name=eid_prefix_len" json:"eid_prefix_len,omitempty"`
	Seid            []byte `binapi:"u8[16],name=seid" json:"seid,omitempty"`
	SeidPrefixLen   uint8  `binapi:"u8,name=seid_prefix_len" json:"seid_prefix_len,omitempty"`
	TTL             uint32 `binapi:"u32,name=ttl" json:"ttl,omitempty"`
	Authoritative   uint8  `binapi:"u8,name=authoritative" json:"authoritative,omitempty"`
	KeyID           uint16 `binapi:"u16,name=key_id" json:"key_id,omitempty"`
	Key             []byte `binapi:"u8[64],name=key" json:"key,omitempty"`
}

func (m *LispEidTableDetails) Reset()               { *m = LispEidTableDetails{} }
func (*LispEidTableDetails) GetMessageName() string { return "lisp_eid_table_details" }
func (*LispEidTableDetails) GetCrcString() string   { return "dcd9f414" }
func (*LispEidTableDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispEidTableDetails) GetRetVal() error {
	return nil
}

func (m *LispEidTableDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LocatorSetIndex
	size += 1      // m.Action
	size += 1      // m.IsLocal
	size += 1      // m.EidType
	size += 1      // m.IsSrcDst
	size += 4      // m.Vni
	size += 1 * 16 // m.Eid
	size += 1      // m.EidPrefixLen
	size += 1 * 16 // m.Seid
	size += 1      // m.SeidPrefixLen
	size += 4      // m.TTL
	size += 1      // m.Authoritative
	size += 2      // m.KeyID
	size += 1 * 64 // m.Key
	return size
}
func (m *LispEidTableDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LocatorSetIndex)
	buf.EncodeUint8(m.Action)
	buf.EncodeUint8(m.IsLocal)
	buf.EncodeUint8(m.EidType)
	buf.EncodeUint8(m.IsSrcDst)
	buf.EncodeUint32(m.Vni)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.EidPrefixLen)
	buf.EncodeBytes(m.Seid, 16)
	buf.EncodeUint8(m.SeidPrefixLen)
	buf.EncodeUint32(m.TTL)
	buf.EncodeUint8(m.Authoritative)
	buf.EncodeUint16(m.KeyID)
	buf.EncodeBytes(m.Key, 64)
	return buf.Bytes(), nil
}
func (m *LispEidTableDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LocatorSetIndex = buf.DecodeUint32()
	m.Action = buf.DecodeUint8()
	m.IsLocal = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.IsSrcDst = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.EidPrefixLen = buf.DecodeUint8()
	m.Seid = make([]byte, 16)
	copy(m.Seid, buf.DecodeBytes(len(m.Seid)))
	m.SeidPrefixLen = buf.DecodeUint8()
	m.TTL = buf.DecodeUint32()
	m.Authoritative = buf.DecodeUint8()
	m.KeyID = buf.DecodeUint16()
	m.Key = make([]byte, 64)
	copy(m.Key, buf.DecodeBytes(len(m.Key)))
	return nil
}

// LispEidTableDump defines message 'lisp_eid_table_dump'.
type LispEidTableDump struct {
	EidSet       uint8  `binapi:"u8,name=eid_set" json:"eid_set,omitempty"`
	PrefixLength uint8  `binapi:"u8,name=prefix_length" json:"prefix_length,omitempty"`
	Vni          uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	EidType      uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid          []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	Filter       uint8  `binapi:"u8,name=filter" json:"filter,omitempty"`
}

func (m *LispEidTableDump) Reset()               { *m = LispEidTableDump{} }
func (*LispEidTableDump) GetMessageName() string { return "lisp_eid_table_dump" }
func (*LispEidTableDump) GetCrcString() string   { return "e0df64da" }
func (*LispEidTableDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispEidTableDump) GetRetVal() error {
	return nil
}

func (m *LispEidTableDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.EidSet
	size += 1      // m.PrefixLength
	size += 4      // m.Vni
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.Filter
	return size
}
func (m *LispEidTableDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.EidSet)
	buf.EncodeUint8(m.PrefixLength)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.Filter)
	return buf.Bytes(), nil
}
func (m *LispEidTableDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EidSet = buf.DecodeUint8()
	m.PrefixLength = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.Filter = buf.DecodeUint8()
	return nil
}

// LispEidTableMapDetails defines message 'lisp_eid_table_map_details'.
type LispEidTableMapDetails struct {
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	DpTable uint32 `binapi:"u32,name=dp_table" json:"dp_table,omitempty"`
}

func (m *LispEidTableMapDetails) Reset()               { *m = LispEidTableMapDetails{} }
func (*LispEidTableMapDetails) GetMessageName() string { return "lisp_eid_table_map_details" }
func (*LispEidTableMapDetails) GetCrcString() string   { return "0b6859e2" }
func (*LispEidTableMapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispEidTableMapDetails) GetRetVal() error {
	return nil
}

func (m *LispEidTableMapDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	size += 4 // m.DpTable
	return size
}
func (m *LispEidTableMapDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint32(m.DpTable)
	return buf.Bytes(), nil
}
func (m *LispEidTableMapDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	m.DpTable = buf.DecodeUint32()
	return nil
}

// LispEidTableMapDump defines message 'lisp_eid_table_map_dump'.
type LispEidTableMapDump struct {
	IsL2 uint8 `binapi:"u8,name=is_l2" json:"is_l2,omitempty"`
}

func (m *LispEidTableMapDump) Reset()               { *m = LispEidTableMapDump{} }
func (*LispEidTableMapDump) GetMessageName() string { return "lisp_eid_table_map_dump" }
func (*LispEidTableMapDump) GetCrcString() string   { return "67c54650" }
func (*LispEidTableMapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispEidTableMapDump) GetRetVal() error {
	return nil
}

func (m *LispEidTableMapDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsL2
	return size
}
func (m *LispEidTableMapDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsL2)
	return buf.Bytes(), nil
}
func (m *LispEidTableMapDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsL2 = buf.DecodeUint8()
	return nil
}

// LispEidTableVniDetails defines message 'lisp_eid_table_vni_details'.
type LispEidTableVniDetails struct {
	Vni uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
}

func (m *LispEidTableVniDetails) Reset()               { *m = LispEidTableVniDetails{} }
func (*LispEidTableVniDetails) GetMessageName() string { return "lisp_eid_table_vni_details" }
func (*LispEidTableVniDetails) GetCrcString() string   { return "64abc01e" }
func (*LispEidTableVniDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispEidTableVniDetails) GetRetVal() error {
	return nil
}

func (m *LispEidTableVniDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	return size
}
func (m *LispEidTableVniDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	return buf.Bytes(), nil
}
func (m *LispEidTableVniDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	return nil
}

// LispEidTableVniDump defines message 'lisp_eid_table_vni_dump'.
type LispEidTableVniDump struct{}

func (m *LispEidTableVniDump) Reset()               { *m = LispEidTableVniDump{} }
func (*LispEidTableVniDump) GetMessageName() string { return "lisp_eid_table_vni_dump" }
func (*LispEidTableVniDump) GetCrcString() string   { return "51077d14" }
func (*LispEidTableVniDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispEidTableVniDump) GetRetVal() error {
	return nil
}

func (m *LispEidTableVniDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *LispEidTableVniDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *LispEidTableVniDump) Unmarshal(b []byte) error {
	return nil
}

// LispEnableDisable defines message 'lisp_enable_disable'.
type LispEnableDisable struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *LispEnableDisable) Reset()               { *m = LispEnableDisable{} }
func (*LispEnableDisable) GetMessageName() string { return "lisp_enable_disable" }
func (*LispEnableDisable) GetCrcString() string   { return "eb0e943b" }
func (*LispEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispEnableDisable) GetRetVal() error {
	return nil
}

func (m *LispEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *LispEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *LispEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// LispEnableDisableReply defines message 'lisp_enable_disable_reply'.
type LispEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispEnableDisableReply) Reset()               { *m = LispEnableDisableReply{} }
func (*LispEnableDisableReply) GetMessageName() string { return "lisp_enable_disable_reply" }
func (*LispEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*LispEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispGetMapRequestItrRlocs defines message 'lisp_get_map_request_itr_rlocs'.
type LispGetMapRequestItrRlocs struct{}

func (m *LispGetMapRequestItrRlocs) Reset()               { *m = LispGetMapRequestItrRlocs{} }
func (*LispGetMapRequestItrRlocs) GetMessageName() string { return "lisp_get_map_request_itr_rlocs" }
func (*LispGetMapRequestItrRlocs) GetCrcString() string   { return "51077d14" }
func (*LispGetMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispGetMapRequestItrRlocs) GetRetVal() error {
	return nil
}

func (m *LispGetMapRequestItrRlocs) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *LispGetMapRequestItrRlocs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *LispGetMapRequestItrRlocs) Unmarshal(b []byte) error {
	return nil
}

// LispGetMapRequestItrRlocsReply defines message 'lisp_get_map_request_itr_rlocs_reply'.
type LispGetMapRequestItrRlocsReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *LispGetMapRequestItrRlocsReply) Reset() { *m = LispGetMapRequestItrRlocsReply{} }
func (*LispGetMapRequestItrRlocsReply) GetMessageName() string {
	return "lisp_get_map_request_itr_rlocs_reply"
}
func (*LispGetMapRequestItrRlocsReply) GetCrcString() string { return "9f56f6f7" }
func (*LispGetMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispGetMapRequestItrRlocsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispGetMapRequestItrRlocsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *LispGetMapRequestItrRlocsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *LispGetMapRequestItrRlocsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// LispLocatorDetails defines message 'lisp_locator_details'.
type LispLocatorDetails struct {
	Local     uint8  `binapi:"u8,name=local" json:"local,omitempty"`
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
	Priority  uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight    uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

func (m *LispLocatorDetails) Reset()               { *m = LispLocatorDetails{} }
func (*LispLocatorDetails) GetMessageName() string { return "lisp_locator_details" }
func (*LispLocatorDetails) GetCrcString() string   { return "b3988a30" }
func (*LispLocatorDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispLocatorDetails) GetRetVal() error {
	return nil
}

func (m *LispLocatorDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Local
	size += 4      // m.SwIfIndex
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	size += 1      // m.Priority
	size += 1      // m.Weight
	return size
}
func (m *LispLocatorDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Local)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	buf.EncodeUint8(m.Priority)
	buf.EncodeUint8(m.Weight)
	return buf.Bytes(), nil
}
func (m *LispLocatorDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Local = buf.DecodeUint8()
	m.SwIfIndex = buf.DecodeUint32()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	m.Priority = buf.DecodeUint8()
	m.Weight = buf.DecodeUint8()
	return nil
}

// LispLocatorDump defines message 'lisp_locator_dump'.
type LispLocatorDump struct {
	LsIndex    uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
	LsName     []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
	IsIndexSet uint8  `binapi:"u8,name=is_index_set" json:"is_index_set,omitempty"`
}

func (m *LispLocatorDump) Reset()               { *m = LispLocatorDump{} }
func (*LispLocatorDump) GetMessageName() string { return "lisp_locator_dump" }
func (*LispLocatorDump) GetCrcString() string   { return "f27d5050" }
func (*LispLocatorDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispLocatorDump) GetRetVal() error {
	return nil
}

func (m *LispLocatorDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LsIndex
	size += 1 * 64 // m.LsName
	size += 1      // m.IsIndexSet
	return size
}
func (m *LispLocatorDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LsIndex)
	buf.EncodeBytes(m.LsName, 64)
	buf.EncodeUint8(m.IsIndexSet)
	return buf.Bytes(), nil
}
func (m *LispLocatorDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LsIndex = buf.DecodeUint32()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	m.IsIndexSet = buf.DecodeUint8()
	return nil
}

// LispLocatorSetDetails defines message 'lisp_locator_set_details'.
type LispLocatorSetDetails struct {
	LsIndex uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
	LsName  []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
}

func (m *LispLocatorSetDetails) Reset()               { *m = LispLocatorSetDetails{} }
func (*LispLocatorSetDetails) GetMessageName() string { return "lisp_locator_set_details" }
func (*LispLocatorSetDetails) GetCrcString() string   { return "6b846882" }
func (*LispLocatorSetDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispLocatorSetDetails) GetRetVal() error {
	return nil
}

func (m *LispLocatorSetDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LsIndex
	size += 1 * 64 // m.LsName
	return size
}
func (m *LispLocatorSetDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LsIndex)
	buf.EncodeBytes(m.LsName, 64)
	return buf.Bytes(), nil
}
func (m *LispLocatorSetDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LsIndex = buf.DecodeUint32()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	return nil
}

// LispLocatorSetDump defines message 'lisp_locator_set_dump'.
type LispLocatorSetDump struct {
	Filter uint8 `binapi:"u8,name=filter" json:"filter,omitempty"`
}

func (m *LispLocatorSetDump) Reset()               { *m = LispLocatorSetDump{} }
func (*LispLocatorSetDump) GetMessageName() string { return "lisp_locator_set_dump" }
func (*LispLocatorSetDump) GetCrcString() string   { return "c79e8ab0" }
func (*LispLocatorSetDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispLocatorSetDump) GetRetVal() error {
	return nil
}

func (m *LispLocatorSetDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Filter
	return size
}
func (m *LispLocatorSetDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Filter)
	return buf.Bytes(), nil
}
func (m *LispLocatorSetDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Filter = buf.DecodeUint8()
	return nil
}

// LispMapRegisterEnableDisable defines message 'lisp_map_register_enable_disable'.
type LispMapRegisterEnableDisable struct {
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *LispMapRegisterEnableDisable) Reset() { *m = LispMapRegisterEnableDisable{} }
func (*LispMapRegisterEnableDisable) GetMessageName() string {
	return "lisp_map_register_enable_disable"
}
func (*LispMapRegisterEnableDisable) GetCrcString() string { return "294103d1" }
func (*LispMapRegisterEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispMapRegisterEnableDisable) GetRetVal() error {
	return nil
}

func (m *LispMapRegisterEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEnabled
	return size
}
func (m *LispMapRegisterEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *LispMapRegisterEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// LispMapRegisterEnableDisableReply defines message 'lisp_map_register_enable_disable_reply'.
type LispMapRegisterEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispMapRegisterEnableDisableReply) Reset() { *m = LispMapRegisterEnableDisableReply{} }
func (*LispMapRegisterEnableDisableReply) GetMessageName() string {
	return "lisp_map_register_enable_disable_reply"
}
func (*LispMapRegisterEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*LispMapRegisterEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispMapRegisterEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispMapRegisterEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispMapRegisterEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispMapRegisterEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispMapRequestMode defines message 'lisp_map_request_mode'.
type LispMapRequestMode struct {
	Mode uint8 `binapi:"u8,name=mode" json:"mode,omitempty"`
}

func (m *LispMapRequestMode) Reset()               { *m = LispMapRequestMode{} }
func (*LispMapRequestMode) GetMessageName() string { return "lisp_map_request_mode" }
func (*LispMapRequestMode) GetCrcString() string   { return "f3f93ce9" }
func (*LispMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispMapRequestMode) GetRetVal() error {
	return nil
}

func (m *LispMapRequestMode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Mode
	return size
}
func (m *LispMapRequestMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Mode)
	return buf.Bytes(), nil
}
func (m *LispMapRequestMode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Mode = buf.DecodeUint8()
	return nil
}

// LispMapRequestModeReply defines message 'lisp_map_request_mode_reply'.
type LispMapRequestModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispMapRequestModeReply) Reset()               { *m = LispMapRequestModeReply{} }
func (*LispMapRequestModeReply) GetMessageName() string { return "lisp_map_request_mode_reply" }
func (*LispMapRequestModeReply) GetCrcString() string   { return "e8d4e804" }
func (*LispMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispMapRequestModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispMapRequestModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispMapRequestModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispMapRequestModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispMapResolverDetails defines message 'lisp_map_resolver_details'.
type LispMapResolverDetails struct {
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *LispMapResolverDetails) Reset()               { *m = LispMapResolverDetails{} }
func (*LispMapResolverDetails) GetMessageName() string { return "lisp_map_resolver_details" }
func (*LispMapResolverDetails) GetCrcString() string   { return "60a5f5ca" }
func (*LispMapResolverDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispMapResolverDetails) GetRetVal() error {
	return nil
}

func (m *LispMapResolverDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *LispMapResolverDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *LispMapResolverDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// LispMapResolverDump defines message 'lisp_map_resolver_dump'.
type LispMapResolverDump struct{}

func (m *LispMapResolverDump) Reset()               { *m = LispMapResolverDump{} }
func (*LispMapResolverDump) GetMessageName() string { return "lisp_map_resolver_dump" }
func (*LispMapResolverDump) GetCrcString() string   { return "51077d14" }
func (*LispMapResolverDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispMapResolverDump) GetRetVal() error {
	return nil
}

func (m *LispMapResolverDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *LispMapResolverDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *LispMapResolverDump) Unmarshal(b []byte) error {
	return nil
}

// LispMapServerDetails defines message 'lisp_map_server_details'.
type LispMapServerDetails struct {
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *LispMapServerDetails) Reset()               { *m = LispMapServerDetails{} }
func (*LispMapServerDetails) GetMessageName() string { return "lisp_map_server_details" }
func (*LispMapServerDetails) GetCrcString() string   { return "60a5f5ca" }
func (*LispMapServerDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispMapServerDetails) GetRetVal() error {
	return nil
}

func (m *LispMapServerDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *LispMapServerDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *LispMapServerDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// LispMapServerDump defines message 'lisp_map_server_dump'.
type LispMapServerDump struct{}

func (m *LispMapServerDump) Reset()               { *m = LispMapServerDump{} }
func (*LispMapServerDump) GetMessageName() string { return "lisp_map_server_dump" }
func (*LispMapServerDump) GetCrcString() string   { return "51077d14" }
func (*LispMapServerDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispMapServerDump) GetRetVal() error {
	return nil
}

func (m *LispMapServerDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *LispMapServerDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *LispMapServerDump) Unmarshal(b []byte) error {
	return nil
}

// LispPitrSetLocatorSet defines message 'lisp_pitr_set_locator_set'.
type LispPitrSetLocatorSet struct {
	IsAdd  uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LsName []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
}

func (m *LispPitrSetLocatorSet) Reset()               { *m = LispPitrSetLocatorSet{} }
func (*LispPitrSetLocatorSet) GetMessageName() string { return "lisp_pitr_set_locator_set" }
func (*LispPitrSetLocatorSet) GetCrcString() string   { return "7aa022dd" }
func (*LispPitrSetLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispPitrSetLocatorSet) GetRetVal() error {
	return nil
}

func (m *LispPitrSetLocatorSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LsName
	return size
}
func (m *LispPitrSetLocatorSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LsName, 64)
	return buf.Bytes(), nil
}
func (m *LispPitrSetLocatorSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	return nil
}

// LispPitrSetLocatorSetReply defines message 'lisp_pitr_set_locator_set_reply'.
type LispPitrSetLocatorSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispPitrSetLocatorSetReply) Reset()               { *m = LispPitrSetLocatorSetReply{} }
func (*LispPitrSetLocatorSetReply) GetMessageName() string { return "lisp_pitr_set_locator_set_reply" }
func (*LispPitrSetLocatorSetReply) GetCrcString() string   { return "e8d4e804" }
func (*LispPitrSetLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispPitrSetLocatorSetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispPitrSetLocatorSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispPitrSetLocatorSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispPitrSetLocatorSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispRlocProbeEnableDisable defines message 'lisp_rloc_probe_enable_disable'.
type LispRlocProbeEnableDisable struct {
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *LispRlocProbeEnableDisable) Reset()               { *m = LispRlocProbeEnableDisable{} }
func (*LispRlocProbeEnableDisable) GetMessageName() string { return "lisp_rloc_probe_enable_disable" }
func (*LispRlocProbeEnableDisable) GetCrcString() string   { return "294103d1" }
func (*LispRlocProbeEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispRlocProbeEnableDisable) GetRetVal() error {
	return nil
}

func (m *LispRlocProbeEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEnabled
	return size
}
func (m *LispRlocProbeEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *LispRlocProbeEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// LispRlocProbeEnableDisableReply defines message 'lisp_rloc_probe_enable_disable_reply'.
type LispRlocProbeEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispRlocProbeEnableDisableReply) Reset() { *m = LispRlocProbeEnableDisableReply{} }
func (*LispRlocProbeEnableDisableReply) GetMessageName() string {
	return "lisp_rloc_probe_enable_disable_reply"
}
func (*LispRlocProbeEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*LispRlocProbeEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispRlocProbeEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispRlocProbeEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispRlocProbeEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispRlocProbeEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// LispUsePetr defines message 'lisp_use_petr'.
type LispUsePetr struct {
	IsIP4   uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Address []byte `binapi:"u8[16],name=address" json:"address,omitempty"`
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
}

func (m *LispUsePetr) Reset()               { *m = LispUsePetr{} }
func (*LispUsePetr) GetMessageName() string { return "lisp_use_petr" }
func (*LispUsePetr) GetCrcString() string   { return "6910787d" }
func (*LispUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *LispUsePetr) GetRetVal() error {
	return nil
}

func (m *LispUsePetr) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIP4
	size += 1 * 16 // m.Address
	size += 1      // m.IsAdd
	return size
}
func (m *LispUsePetr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIP4)
	buf.EncodeBytes(m.Address, 16)
	buf.EncodeUint8(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *LispUsePetr) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIP4 = buf.DecodeUint8()
	m.Address = make([]byte, 16)
	copy(m.Address, buf.DecodeBytes(len(m.Address)))
	m.IsAdd = buf.DecodeUint8()
	return nil
}

// LispUsePetrReply defines message 'lisp_use_petr_reply'.
type LispUsePetrReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *LispUsePetrReply) Reset()               { *m = LispUsePetrReply{} }
func (*LispUsePetrReply) GetMessageName() string { return "lisp_use_petr_reply" }
func (*LispUsePetrReply) GetCrcString() string   { return "e8d4e804" }
func (*LispUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *LispUsePetrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *LispUsePetrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *LispUsePetrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *LispUsePetrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ShowLispMapRegisterState defines message 'show_lisp_map_register_state'.
type ShowLispMapRegisterState struct{}

func (m *ShowLispMapRegisterState) Reset()               { *m = ShowLispMapRegisterState{} }
func (*ShowLispMapRegisterState) GetMessageName() string { return "show_lisp_map_register_state" }
func (*ShowLispMapRegisterState) GetCrcString() string   { return "51077d14" }
func (*ShowLispMapRegisterState) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispMapRegisterState) GetRetVal() error {
	return nil
}

func (m *ShowLispMapRegisterState) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispMapRegisterState) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispMapRegisterState) Unmarshal(b []byte) error {
	return nil
}

// ShowLispMapRegisterStateReply defines message 'show_lisp_map_register_state_reply'.
type ShowLispMapRegisterStateReply struct {
	Retval    int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *ShowLispMapRegisterStateReply) Reset() { *m = ShowLispMapRegisterStateReply{} }
func (*ShowLispMapRegisterStateReply) GetMessageName() string {
	return "show_lisp_map_register_state_reply"
}
func (*ShowLispMapRegisterStateReply) GetCrcString() string { return "14304fbc" }
func (*ShowLispMapRegisterStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispMapRegisterStateReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispMapRegisterStateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEnabled
	return size
}
func (m *ShowLispMapRegisterStateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *ShowLispMapRegisterStateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// ShowLispMapRequestMode defines message 'show_lisp_map_request_mode'.
type ShowLispMapRequestMode struct{}

func (m *ShowLispMapRequestMode) Reset()               { *m = ShowLispMapRequestMode{} }
func (*ShowLispMapRequestMode) GetMessageName() string { return "show_lisp_map_request_mode" }
func (*ShowLispMapRequestMode) GetCrcString() string   { return "51077d14" }
func (*ShowLispMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispMapRequestMode) GetRetVal() error {
	return nil
}

func (m *ShowLispMapRequestMode) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispMapRequestMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispMapRequestMode) Unmarshal(b []byte) error {
	return nil
}

// ShowLispMapRequestModeReply defines message 'show_lisp_map_request_mode_reply'.
type ShowLispMapRequestModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	Mode   uint8 `binapi:"u8,name=mode" json:"mode,omitempty"`
}

func (m *ShowLispMapRequestModeReply) Reset() { *m = ShowLispMapRequestModeReply{} }
func (*ShowLispMapRequestModeReply) GetMessageName() string {
	return "show_lisp_map_request_mode_reply"
}
func (*ShowLispMapRequestModeReply) GetCrcString() string { return "d423107c" }
func (*ShowLispMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispMapRequestModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispMapRequestModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.Mode
	return size
}
func (m *ShowLispMapRequestModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Mode)
	return buf.Bytes(), nil
}
func (m *ShowLispMapRequestModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Mode = buf.DecodeUint8()
	return nil
}

// ShowLispPitr defines message 'show_lisp_pitr'.
type ShowLispPitr struct{}

func (m *ShowLispPitr) Reset()               { *m = ShowLispPitr{} }
func (*ShowLispPitr) GetMessageName() string { return "show_lisp_pitr" }
func (*ShowLispPitr) GetCrcString() string   { return "51077d14" }
func (*ShowLispPitr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispPitr) GetRetVal() error {
	return nil
}

func (m *ShowLispPitr) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispPitr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispPitr) Unmarshal(b []byte) error {
	return nil
}

// ShowLispPitrReply defines message 'show_lisp_pitr_reply'.
type ShowLispPitrReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Status         uint8  `binapi:"u8,name=status" json:"status,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *ShowLispPitrReply) Reset()               { *m = ShowLispPitrReply{} }
func (*ShowLispPitrReply) GetMessageName() string { return "show_lisp_pitr_reply" }
func (*ShowLispPitrReply) GetCrcString() string   { return "dca512cc" }
func (*ShowLispPitrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispPitrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispPitrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1      // m.Status
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *ShowLispPitrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Status)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *ShowLispPitrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Status = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// ShowLispRlocProbeState defines message 'show_lisp_rloc_probe_state'.
type ShowLispRlocProbeState struct{}

func (m *ShowLispRlocProbeState) Reset()               { *m = ShowLispRlocProbeState{} }
func (*ShowLispRlocProbeState) GetMessageName() string { return "show_lisp_rloc_probe_state" }
func (*ShowLispRlocProbeState) GetCrcString() string   { return "51077d14" }
func (*ShowLispRlocProbeState) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispRlocProbeState) GetRetVal() error {
	return nil
}

func (m *ShowLispRlocProbeState) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispRlocProbeState) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispRlocProbeState) Unmarshal(b []byte) error {
	return nil
}

// ShowLispRlocProbeStateReply defines message 'show_lisp_rloc_probe_state_reply'.
type ShowLispRlocProbeStateReply struct {
	Retval    int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *ShowLispRlocProbeStateReply) Reset() { *m = ShowLispRlocProbeStateReply{} }
func (*ShowLispRlocProbeStateReply) GetMessageName() string {
	return "show_lisp_rloc_probe_state_reply"
}
func (*ShowLispRlocProbeStateReply) GetCrcString() string { return "14304fbc" }
func (*ShowLispRlocProbeStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispRlocProbeStateReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispRlocProbeStateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEnabled
	return size
}
func (m *ShowLispRlocProbeStateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *ShowLispRlocProbeStateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// ShowLispStatus defines message 'show_lisp_status'.
type ShowLispStatus struct{}

func (m *ShowLispStatus) Reset()               { *m = ShowLispStatus{} }
func (*ShowLispStatus) GetMessageName() string { return "show_lisp_status" }
func (*ShowLispStatus) GetCrcString() string   { return "51077d14" }
func (*ShowLispStatus) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispStatus) GetRetVal() error {
	return nil
}

func (m *ShowLispStatus) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispStatus) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispStatus) Unmarshal(b []byte) error {
	return nil
}

// ShowLispStatusReply defines message 'show_lisp_status_reply'.
type ShowLispStatusReply struct {
	Retval        int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	FeatureStatus uint8 `binapi:"u8,name=feature_status" json:"feature_status,omitempty"`
	GpeStatus     uint8 `binapi:"u8,name=gpe_status" json:"gpe_status,omitempty"`
}

func (m *ShowLispStatusReply) Reset()               { *m = ShowLispStatusReply{} }
func (*ShowLispStatusReply) GetMessageName() string { return "show_lisp_status_reply" }
func (*ShowLispStatusReply) GetCrcString() string   { return "ddcf48ef" }
func (*ShowLispStatusReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispStatusReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispStatusReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.FeatureStatus
	size += 1 // m.GpeStatus
	return size
}
func (m *ShowLispStatusReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.FeatureStatus)
	buf.EncodeUint8(m.GpeStatus)
	return buf.Bytes(), nil
}
func (m *ShowLispStatusReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.FeatureStatus = buf.DecodeUint8()
	m.GpeStatus = buf.DecodeUint8()
	return nil
}

// ShowLispUsePetr defines message 'show_lisp_use_petr'.
type ShowLispUsePetr struct{}

func (m *ShowLispUsePetr) Reset()               { *m = ShowLispUsePetr{} }
func (*ShowLispUsePetr) GetMessageName() string { return "show_lisp_use_petr" }
func (*ShowLispUsePetr) GetCrcString() string   { return "51077d14" }
func (*ShowLispUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowLispUsePetr) GetRetVal() error {
	return nil
}

func (m *ShowLispUsePetr) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowLispUsePetr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowLispUsePetr) Unmarshal(b []byte) error {
	return nil
}

// ShowLispUsePetrReply defines message 'show_lisp_use_petr_reply'.
type ShowLispUsePetrReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Status  uint8  `binapi:"u8,name=status" json:"status,omitempty"`
	IsIP4   uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Address []byte `binapi:"u8[16],name=address" json:"address,omitempty"`
}

func (m *ShowLispUsePetrReply) Reset()               { *m = ShowLispUsePetrReply{} }
func (*ShowLispUsePetrReply) GetMessageName() string { return "show_lisp_use_petr_reply" }
func (*ShowLispUsePetrReply) GetCrcString() string   { return "1eb21916" }
func (*ShowLispUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowLispUsePetrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowLispUsePetrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1      // m.Status
	size += 1      // m.IsIP4
	size += 1 * 16 // m.Address
	return size
}
func (m *ShowLispUsePetrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Status)
	buf.EncodeUint8(m.IsIP4)
	buf.EncodeBytes(m.Address, 16)
	return buf.Bytes(), nil
}
func (m *ShowLispUsePetrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Status = buf.DecodeUint8()
	m.IsIP4 = buf.DecodeUint8()
	m.Address = make([]byte, 16)
	copy(m.Address, buf.DecodeBytes(len(m.Address)))
	return nil
}

func init() { file_lisp_binapi_init() }
func file_lisp_binapi_init() {
	api.RegisterMessage((*LispAddDelAdjacency)(nil), "lisp_add_del_adjacency_f047390d")
	api.RegisterMessage((*LispAddDelAdjacencyReply)(nil), "lisp_add_del_adjacency_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelLocalEid)(nil), "lisp_add_del_local_eid_e6d00717")
	api.RegisterMessage((*LispAddDelLocalEidReply)(nil), "lisp_add_del_local_eid_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelLocator)(nil), "lisp_add_del_locator_006a4240")
	api.RegisterMessage((*LispAddDelLocatorReply)(nil), "lisp_add_del_locator_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelLocatorSet)(nil), "lisp_add_del_locator_set_06968e38")
	api.RegisterMessage((*LispAddDelLocatorSetReply)(nil), "lisp_add_del_locator_set_reply_b6666db4")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocs)(nil), "lisp_add_del_map_request_itr_rlocs_c7c6cb2f")
	api.RegisterMessage((*LispAddDelMapRequestItrRlocsReply)(nil), "lisp_add_del_map_request_itr_rlocs_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelMapResolver)(nil), "lisp_add_del_map_resolver_0ebcd37d")
	api.RegisterMessage((*LispAddDelMapResolverReply)(nil), "lisp_add_del_map_resolver_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelMapServer)(nil), "lisp_add_del_map_server_0ebcd37d")
	api.RegisterMessage((*LispAddDelMapServerReply)(nil), "lisp_add_del_map_server_reply_e8d4e804")
	api.RegisterMessage((*LispAddDelRemoteMapping)(nil), "lisp_add_del_remote_mapping_b879c3a9")
	api.RegisterMessage((*LispAddDelRemoteMappingReply)(nil), "lisp_add_del_remote_mapping_reply_e8d4e804")
	api.RegisterMessage((*LispAdjacenciesGet)(nil), "lisp_adjacencies_get_8d1f2fe9")
	api.RegisterMessage((*LispAdjacenciesGetReply)(nil), "lisp_adjacencies_get_reply_ada0f464")
	api.RegisterMessage((*LispEidTableAddDelMap)(nil), "lisp_eid_table_add_del_map_59e9975e")
	api.RegisterMessage((*LispEidTableAddDelMapReply)(nil), "lisp_eid_table_add_del_map_reply_e8d4e804")
	api.RegisterMessage((*LispEidTableDetails)(nil), "lisp_eid_table_details_dcd9f414")
	api.RegisterMessage((*LispEidTableDump)(nil), "lisp_eid_table_dump_e0df64da")
	api.RegisterMessage((*LispEidTableMapDetails)(nil), "lisp_eid_table_map_details_0b6859e2")
	api.RegisterMessage((*LispEidTableMapDump)(nil), "lisp_eid_table_map_dump_67c54650")
	api.RegisterMessage((*LispEidTableVniDetails)(nil), "lisp_eid_table_vni_details_64abc01e")
	api.RegisterMessage((*LispEidTableVniDump)(nil), "lisp_eid_table_vni_dump_51077d14")
	api.RegisterMessage((*LispEnableDisable)(nil), "lisp_enable_disable_eb0e943b")
	api.RegisterMessage((*LispEnableDisableReply)(nil), "lisp_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*LispGetMapRequestItrRlocs)(nil), "lisp_get_map_request_itr_rlocs_51077d14")
	api.RegisterMessage((*LispGetMapRequestItrRlocsReply)(nil), "lisp_get_map_request_itr_rlocs_reply_9f56f6f7")
	api.RegisterMessage((*LispLocatorDetails)(nil), "lisp_locator_details_b3988a30")
	api.RegisterMessage((*LispLocatorDump)(nil), "lisp_locator_dump_f27d5050")
	api.RegisterMessage((*LispLocatorSetDetails)(nil), "lisp_locator_set_details_6b846882")
	api.RegisterMessage((*LispLocatorSetDump)(nil), "lisp_locator_set_dump_c79e8ab0")
	api.RegisterMessage((*LispMapRegisterEnableDisable)(nil), "lisp_map_register_enable_disable_294103d1")
	api.RegisterMessage((*LispMapRegisterEnableDisableReply)(nil), "lisp_map_register_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*LispMapRequestMode)(nil), "lisp_map_request_mode_f3f93ce9")
	api.RegisterMessage((*LispMapRequestModeReply)(nil), "lisp_map_request_mode_reply_e8d4e804")
	api.RegisterMessage((*LispMapResolverDetails)(nil), "lisp_map_resolver_details_60a5f5ca")
	api.RegisterMessage((*LispMapResolverDump)(nil), "lisp_map_resolver_dump_51077d14")
	api.RegisterMessage((*LispMapServerDetails)(nil), "lisp_map_server_details_60a5f5ca")
	api.RegisterMessage((*LispMapServerDump)(nil), "lisp_map_server_dump_51077d14")
	api.RegisterMessage((*LispPitrSetLocatorSet)(nil), "lisp_pitr_set_locator_set_7aa022dd")
	api.RegisterMessage((*LispPitrSetLocatorSetReply)(nil), "lisp_pitr_set_locator_set_reply_e8d4e804")
	api.RegisterMessage((*LispRlocProbeEnableDisable)(nil), "lisp_rloc_probe_enable_disable_294103d1")
	api.RegisterMessage((*LispRlocProbeEnableDisableReply)(nil), "lisp_rloc_probe_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*LispUsePetr)(nil), "lisp_use_petr_6910787d")
	api.RegisterMessage((*LispUsePetrReply)(nil), "lisp_use_petr_reply_e8d4e804")
	api.RegisterMessage((*ShowLispMapRegisterState)(nil), "show_lisp_map_register_state_51077d14")
	api.RegisterMessage((*ShowLispMapRegisterStateReply)(nil), "show_lisp_map_register_state_reply_14304fbc")
	api.RegisterMessage((*ShowLispMapRequestMode)(nil), "show_lisp_map_request_mode_51077d14")
	api.RegisterMessage((*ShowLispMapRequestModeReply)(nil), "show_lisp_map_request_mode_reply_d423107c")
	api.RegisterMessage((*ShowLispPitr)(nil), "show_lisp_pitr_51077d14")
	api.RegisterMessage((*ShowLispPitrReply)(nil), "show_lisp_pitr_reply_dca512cc")
	api.RegisterMessage((*ShowLispRlocProbeState)(nil), "show_lisp_rloc_probe_state_51077d14")
	api.RegisterMessage((*ShowLispRlocProbeStateReply)(nil), "show_lisp_rloc_probe_state_reply_14304fbc")
	api.RegisterMessage((*ShowLispStatus)(nil), "show_lisp_status_51077d14")
	api.RegisterMessage((*ShowLispStatusReply)(nil), "show_lisp_status_reply_ddcf48ef")
	api.RegisterMessage((*ShowLispUsePetr)(nil), "show_lisp_use_petr_51077d14")
	api.RegisterMessage((*ShowLispUsePetrReply)(nil), "show_lisp_use_petr_reply_1eb21916")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*LispAddDelAdjacency)(nil),
		(*LispAddDelAdjacencyReply)(nil),
		(*LispAddDelLocalEid)(nil),
		(*LispAddDelLocalEidReply)(nil),
		(*LispAddDelLocator)(nil),
		(*LispAddDelLocatorReply)(nil),
		(*LispAddDelLocatorSet)(nil),
		(*LispAddDelLocatorSetReply)(nil),
		(*LispAddDelMapRequestItrRlocs)(nil),
		(*LispAddDelMapRequestItrRlocsReply)(nil),
		(*LispAddDelMapResolver)(nil),
		(*LispAddDelMapResolverReply)(nil),
		(*LispAddDelMapServer)(nil),
		(*LispAddDelMapServerReply)(nil),
		(*LispAddDelRemoteMapping)(nil),
		(*LispAddDelRemoteMappingReply)(nil),
		(*LispAdjacenciesGet)(nil),
		(*LispAdjacenciesGetReply)(nil),
		(*LispEidTableAddDelMap)(nil),
		(*LispEidTableAddDelMapReply)(nil),
		(*LispEidTableDetails)(nil),
		(*LispEidTableDump)(nil),
		(*LispEidTableMapDetails)(nil),
		(*LispEidTableMapDump)(nil),
		(*LispEidTableVniDetails)(nil),
		(*LispEidTableVniDump)(nil),
		(*LispEnableDisable)(nil),
		(*LispEnableDisableReply)(nil),
		(*LispGetMapRequestItrRlocs)(nil),
		(*LispGetMapRequestItrRlocsReply)(nil),
		(*LispLocatorDetails)(nil),
		(*LispLocatorDump)(nil),
		(*LispLocatorSetDetails)(nil),
		(*LispLocatorSetDump)(nil),
		(*LispMapRegisterEnableDisable)(nil),
		(*LispMapRegisterEnableDisableReply)(nil),
		(*LispMapRequestMode)(nil),
		(*LispMapRequestModeReply)(nil),
		(*LispMapResolverDetails)(nil),
		(*LispMapResolverDump)(nil),
		(*LispMapServerDetails)(nil),
		(*LispMapServerDump)(nil),
		(*LispPitrSetLocatorSet)(nil),
		(*LispPitrSetLocatorSetReply)(nil),
		(*LispRlocProbeEnableDisable)(nil),
		(*LispRlocProbeEnableDisableReply)(nil),
		(*LispUsePetr)(nil),
		(*LispUsePetrReply)(nil),
		(*ShowLispMapRegisterState)(nil),
		(*ShowLispMapRegisterStateReply)(nil),
		(*ShowLispMapRequestMode)(nil),
		(*ShowLispMapRequestModeReply)(nil),
		(*ShowLispPitr)(nil),
		(*ShowLispPitrReply)(nil),
		(*ShowLispRlocProbeState)(nil),
		(*ShowLispRlocProbeStateReply)(nil),
		(*ShowLispStatus)(nil),
		(*ShowLispStatusReply)(nil),
		(*ShowLispUsePetr)(nil),
		(*ShowLispUsePetrReply)(nil),
	}
}
