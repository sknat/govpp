// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.5.0-dev
//  VPP:              20.01
// source: .vppapi/core/one.api.json

// Package one contains generated bindings for API file one.api.
//
// Contents:
//   5 structs
// 108 messages
//
package one

import (
	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "one"
	APIVersion = "1.0.0"
	VersionCrc = 0xde9891c3
)

// OneAdjacency defines type 'one_adjacency'.
type OneAdjacency struct {
	EidType       uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Reid          []byte `binapi:"u8[16],name=reid" json:"reid,omitempty"`
	Leid          []byte `binapi:"u8[16],name=leid" json:"leid,omitempty"`
	ReidPrefixLen uint8  `binapi:"u8,name=reid_prefix_len" json:"reid_prefix_len,omitempty"`
	LeidPrefixLen uint8  `binapi:"u8,name=leid_prefix_len" json:"leid_prefix_len,omitempty"`
}

// OneL2ArpEntry defines type 'one_l2_arp_entry'.
type OneL2ArpEntry struct {
	Mac []byte `binapi:"u8[6],name=mac" json:"mac,omitempty"`
	IP4 uint32 `binapi:"u32,name=ip4" json:"ip4,omitempty"`
}

// OneLocalLocator defines type 'one_local_locator'.
type OneLocalLocator struct {
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	Priority  uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight    uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

// OneNdpEntry defines type 'one_ndp_entry'.
type OneNdpEntry struct {
	Mac []byte `binapi:"u8[6],name=mac" json:"mac,omitempty"`
	IP6 []byte `binapi:"u8[16],name=ip6" json:"ip6,omitempty"`
}

// OneRemoteLocator defines type 'one_remote_locator'.
type OneRemoteLocator struct {
	IsIP4    uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Priority uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight   uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
	Addr     []byte `binapi:"u8[16],name=addr" json:"addr,omitempty"`
}

// OneAddDelAdjacency defines message 'one_add_del_adjacency'.
type OneAddDelAdjacency struct {
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	EidType uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Reid    []byte `binapi:"u8[16],name=reid" json:"reid,omitempty"`
	Leid    []byte `binapi:"u8[16],name=leid" json:"leid,omitempty"`
	ReidLen uint8  `binapi:"u8,name=reid_len" json:"reid_len,omitempty"`
	LeidLen uint8  `binapi:"u8,name=leid_len" json:"leid_len,omitempty"`
}

func (m *OneAddDelAdjacency) Reset()               { *m = OneAddDelAdjacency{} }
func (*OneAddDelAdjacency) GetMessageName() string { return "one_add_del_adjacency" }
func (*OneAddDelAdjacency) GetCrcString() string   { return "f047390d" }
func (*OneAddDelAdjacency) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelAdjacency) GetRetVal() error {
	return nil
}

func (m *OneAddDelAdjacency) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 4      // m.Vni
	size += 1      // m.EidType
	size += 1 * 16 // m.Reid
	size += 1 * 16 // m.Leid
	size += 1      // m.ReidLen
	size += 1      // m.LeidLen
	return size
}
func (m *OneAddDelAdjacency) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Reid, 16)
	buf.EncodeBytes(m.Leid, 16)
	buf.EncodeUint8(m.ReidLen)
	buf.EncodeUint8(m.LeidLen)
	return buf.Bytes(), nil
}
func (m *OneAddDelAdjacency) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.EidType = buf.DecodeUint8()
	m.Reid = make([]byte, 16)
	copy(m.Reid, buf.DecodeBytes(len(m.Reid)))
	m.Leid = make([]byte, 16)
	copy(m.Leid, buf.DecodeBytes(len(m.Leid)))
	m.ReidLen = buf.DecodeUint8()
	m.LeidLen = buf.DecodeUint8()
	return nil
}

// OneAddDelAdjacencyReply defines message 'one_add_del_adjacency_reply'.
type OneAddDelAdjacencyReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelAdjacencyReply) Reset()               { *m = OneAddDelAdjacencyReply{} }
func (*OneAddDelAdjacencyReply) GetMessageName() string { return "one_add_del_adjacency_reply" }
func (*OneAddDelAdjacencyReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelAdjacencyReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelAdjacencyReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelAdjacencyReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelAdjacencyReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelAdjacencyReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelL2ArpEntry defines message 'one_add_del_l2_arp_entry'.
type OneAddDelL2ArpEntry struct {
	IsAdd uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Mac   []byte `binapi:"u8[6],name=mac" json:"mac,omitempty"`
	Bd    uint32 `binapi:"u32,name=bd" json:"bd,omitempty"`
	IP4   uint32 `binapi:"u32,name=ip4" json:"ip4,omitempty"`
}

func (m *OneAddDelL2ArpEntry) Reset()               { *m = OneAddDelL2ArpEntry{} }
func (*OneAddDelL2ArpEntry) GetMessageName() string { return "one_add_del_l2_arp_entry" }
func (*OneAddDelL2ArpEntry) GetCrcString() string   { return "a95cc2d7" }
func (*OneAddDelL2ArpEntry) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelL2ArpEntry) GetRetVal() error {
	return nil
}

func (m *OneAddDelL2ArpEntry) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1     // m.IsAdd
	size += 1 * 6 // m.Mac
	size += 4     // m.Bd
	size += 4     // m.IP4
	return size
}
func (m *OneAddDelL2ArpEntry) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.Mac, 6)
	buf.EncodeUint32(m.Bd)
	buf.EncodeUint32(m.IP4)
	return buf.Bytes(), nil
}
func (m *OneAddDelL2ArpEntry) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Mac = make([]byte, 6)
	copy(m.Mac, buf.DecodeBytes(len(m.Mac)))
	m.Bd = buf.DecodeUint32()
	m.IP4 = buf.DecodeUint32()
	return nil
}

// OneAddDelL2ArpEntryReply defines message 'one_add_del_l2_arp_entry_reply'.
type OneAddDelL2ArpEntryReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelL2ArpEntryReply) Reset()               { *m = OneAddDelL2ArpEntryReply{} }
func (*OneAddDelL2ArpEntryReply) GetMessageName() string { return "one_add_del_l2_arp_entry_reply" }
func (*OneAddDelL2ArpEntryReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelL2ArpEntryReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelL2ArpEntryReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelL2ArpEntryReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelL2ArpEntryReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelL2ArpEntryReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelLocalEid defines message 'one_add_del_local_eid'.
type OneAddDelLocalEid struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	EidType        uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid            []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	PrefixLen      uint8  `binapi:"u8,name=prefix_len" json:"prefix_len,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	Vni            uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	KeyID          uint16 `binapi:"u16,name=key_id" json:"key_id,omitempty"`
	Key            []byte `binapi:"u8[64],name=key" json:"key,omitempty"`
}

func (m *OneAddDelLocalEid) Reset()               { *m = OneAddDelLocalEid{} }
func (*OneAddDelLocalEid) GetMessageName() string { return "one_add_del_local_eid" }
func (*OneAddDelLocalEid) GetCrcString() string   { return "e6d00717" }
func (*OneAddDelLocalEid) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelLocalEid) GetRetVal() error {
	return nil
}

func (m *OneAddDelLocalEid) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.PrefixLen
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.Vni
	size += 2      // m.KeyID
	size += 1 * 64 // m.Key
	return size
}
func (m *OneAddDelLocalEid) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.PrefixLen)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint16(m.KeyID)
	buf.EncodeBytes(m.Key, 64)
	return buf.Bytes(), nil
}
func (m *OneAddDelLocalEid) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.PrefixLen = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.Vni = buf.DecodeUint32()
	m.KeyID = buf.DecodeUint16()
	m.Key = make([]byte, 64)
	copy(m.Key, buf.DecodeBytes(len(m.Key)))
	return nil
}

// OneAddDelLocalEidReply defines message 'one_add_del_local_eid_reply'.
type OneAddDelLocalEidReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelLocalEidReply) Reset()               { *m = OneAddDelLocalEidReply{} }
func (*OneAddDelLocalEidReply) GetMessageName() string { return "one_add_del_local_eid_reply" }
func (*OneAddDelLocalEidReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelLocalEidReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelLocalEidReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelLocalEidReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelLocalEidReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelLocalEidReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelLocator defines message 'one_add_del_locator'.
type OneAddDelLocator struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	SwIfIndex      uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	Priority       uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight         uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

func (m *OneAddDelLocator) Reset()               { *m = OneAddDelLocator{} }
func (*OneAddDelLocator) GetMessageName() string { return "one_add_del_locator" }
func (*OneAddDelLocator) GetCrcString() string   { return "006a4240" }
func (*OneAddDelLocator) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelLocator) GetRetVal() error {
	return nil
}

func (m *OneAddDelLocator) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.SwIfIndex
	size += 1      // m.Priority
	size += 1      // m.Weight
	return size
}
func (m *OneAddDelLocator) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.Priority)
	buf.EncodeUint8(m.Weight)
	return buf.Bytes(), nil
}
func (m *OneAddDelLocator) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.SwIfIndex = buf.DecodeUint32()
	m.Priority = buf.DecodeUint8()
	m.Weight = buf.DecodeUint8()
	return nil
}

// OneAddDelLocatorReply defines message 'one_add_del_locator_reply'.
type OneAddDelLocatorReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelLocatorReply) Reset()               { *m = OneAddDelLocatorReply{} }
func (*OneAddDelLocatorReply) GetMessageName() string { return "one_add_del_locator_reply" }
func (*OneAddDelLocatorReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelLocatorReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelLocatorReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelLocatorReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelLocatorReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelLocatorReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelLocatorSet defines message 'one_add_del_locator_set'.
type OneAddDelLocatorSet struct {
	IsAdd          uint8             `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte            `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
	LocatorNum     uint32            `binapi:"u32,name=locator_num" json:"-"`
	Locators       []OneLocalLocator `binapi:"one_local_locator[locator_num],name=locators" json:"locators,omitempty"`
}

func (m *OneAddDelLocatorSet) Reset()               { *m = OneAddDelLocatorSet{} }
func (*OneAddDelLocatorSet) GetMessageName() string { return "one_add_del_locator_set" }
func (*OneAddDelLocatorSet) GetCrcString() string   { return "2e73b050" }
func (*OneAddDelLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelLocatorSet) GetRetVal() error {
	return nil
}

func (m *OneAddDelLocatorSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	size += 4      // m.LocatorNum
	for j1 := 0; j1 < len(m.Locators); j1++ {
		var s1 OneLocalLocator
		_ = s1
		if j1 < len(m.Locators) {
			s1 = m.Locators[j1]
		}
		size += 4 // s1.SwIfIndex
		size += 1 // s1.Priority
		size += 1 // s1.Weight
	}
	return size
}
func (m *OneAddDelLocatorSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	buf.EncodeUint32(uint32(len(m.Locators)))
	for j0 := 0; j0 < len(m.Locators); j0++ {
		var v0 OneLocalLocator // Locators
		if j0 < len(m.Locators) {
			v0 = m.Locators[j0]
		}
		buf.EncodeUint32(v0.SwIfIndex)
		buf.EncodeUint8(v0.Priority)
		buf.EncodeUint8(v0.Weight)
	}
	return buf.Bytes(), nil
}
func (m *OneAddDelLocatorSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	m.LocatorNum = buf.DecodeUint32()
	m.Locators = make([]OneLocalLocator, m.LocatorNum)
	for j0 := 0; j0 < len(m.Locators); j0++ {
		m.Locators[j0].SwIfIndex = buf.DecodeUint32()
		m.Locators[j0].Priority = buf.DecodeUint8()
		m.Locators[j0].Weight = buf.DecodeUint8()
	}
	return nil
}

// OneAddDelLocatorSetReply defines message 'one_add_del_locator_set_reply'.
type OneAddDelLocatorSetReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	LsIndex uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
}

func (m *OneAddDelLocatorSetReply) Reset()               { *m = OneAddDelLocatorSetReply{} }
func (*OneAddDelLocatorSetReply) GetMessageName() string { return "one_add_del_locator_set_reply" }
func (*OneAddDelLocatorSetReply) GetCrcString() string   { return "b6666db4" }
func (*OneAddDelLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelLocatorSetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelLocatorSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.LsIndex
	return size
}
func (m *OneAddDelLocatorSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.LsIndex)
	return buf.Bytes(), nil
}
func (m *OneAddDelLocatorSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.LsIndex = buf.DecodeUint32()
	return nil
}

// OneAddDelMapRequestItrRlocs defines message 'one_add_del_map_request_itr_rlocs'.
type OneAddDelMapRequestItrRlocs struct {
	IsAdd          uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *OneAddDelMapRequestItrRlocs) Reset() { *m = OneAddDelMapRequestItrRlocs{} }
func (*OneAddDelMapRequestItrRlocs) GetMessageName() string {
	return "one_add_del_map_request_itr_rlocs"
}
func (*OneAddDelMapRequestItrRlocs) GetCrcString() string { return "c7c6cb2f" }
func (*OneAddDelMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelMapRequestItrRlocs) GetRetVal() error {
	return nil
}

func (m *OneAddDelMapRequestItrRlocs) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *OneAddDelMapRequestItrRlocs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapRequestItrRlocs) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// OneAddDelMapRequestItrRlocsReply defines message 'one_add_del_map_request_itr_rlocs_reply'.
type OneAddDelMapRequestItrRlocsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelMapRequestItrRlocsReply) Reset() { *m = OneAddDelMapRequestItrRlocsReply{} }
func (*OneAddDelMapRequestItrRlocsReply) GetMessageName() string {
	return "one_add_del_map_request_itr_rlocs_reply"
}
func (*OneAddDelMapRequestItrRlocsReply) GetCrcString() string { return "e8d4e804" }
func (*OneAddDelMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelMapRequestItrRlocsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelMapRequestItrRlocsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelMapRequestItrRlocsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapRequestItrRlocsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelMapResolver defines message 'one_add_del_map_resolver'.
type OneAddDelMapResolver struct {
	IsAdd     uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *OneAddDelMapResolver) Reset()               { *m = OneAddDelMapResolver{} }
func (*OneAddDelMapResolver) GetMessageName() string { return "one_add_del_map_resolver" }
func (*OneAddDelMapResolver) GetCrcString() string   { return "0ebcd37d" }
func (*OneAddDelMapResolver) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelMapResolver) GetRetVal() error {
	return nil
}

func (m *OneAddDelMapResolver) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *OneAddDelMapResolver) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapResolver) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// OneAddDelMapResolverReply defines message 'one_add_del_map_resolver_reply'.
type OneAddDelMapResolverReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelMapResolverReply) Reset()               { *m = OneAddDelMapResolverReply{} }
func (*OneAddDelMapResolverReply) GetMessageName() string { return "one_add_del_map_resolver_reply" }
func (*OneAddDelMapResolverReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelMapResolverReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelMapResolverReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelMapResolverReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelMapResolverReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapResolverReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelMapServer defines message 'one_add_del_map_server'.
type OneAddDelMapServer struct {
	IsAdd     uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *OneAddDelMapServer) Reset()               { *m = OneAddDelMapServer{} }
func (*OneAddDelMapServer) GetMessageName() string { return "one_add_del_map_server" }
func (*OneAddDelMapServer) GetCrcString() string   { return "0ebcd37d" }
func (*OneAddDelMapServer) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelMapServer) GetRetVal() error {
	return nil
}

func (m *OneAddDelMapServer) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *OneAddDelMapServer) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapServer) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// OneAddDelMapServerReply defines message 'one_add_del_map_server_reply'.
type OneAddDelMapServerReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelMapServerReply) Reset()               { *m = OneAddDelMapServerReply{} }
func (*OneAddDelMapServerReply) GetMessageName() string { return "one_add_del_map_server_reply" }
func (*OneAddDelMapServerReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelMapServerReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelMapServerReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelMapServerReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelMapServerReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelMapServerReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelNdpEntry defines message 'one_add_del_ndp_entry'.
type OneAddDelNdpEntry struct {
	IsAdd uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Mac   []byte `binapi:"u8[6],name=mac" json:"mac,omitempty"`
	Bd    uint32 `binapi:"u32,name=bd" json:"bd,omitempty"`
	IP6   []byte `binapi:"u8[16],name=ip6" json:"ip6,omitempty"`
}

func (m *OneAddDelNdpEntry) Reset()               { *m = OneAddDelNdpEntry{} }
func (*OneAddDelNdpEntry) GetMessageName() string { return "one_add_del_ndp_entry" }
func (*OneAddDelNdpEntry) GetCrcString() string   { return "e9468fe3" }
func (*OneAddDelNdpEntry) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelNdpEntry) GetRetVal() error {
	return nil
}

func (m *OneAddDelNdpEntry) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 6  // m.Mac
	size += 4      // m.Bd
	size += 1 * 16 // m.IP6
	return size
}
func (m *OneAddDelNdpEntry) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.Mac, 6)
	buf.EncodeUint32(m.Bd)
	buf.EncodeBytes(m.IP6, 16)
	return buf.Bytes(), nil
}
func (m *OneAddDelNdpEntry) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Mac = make([]byte, 6)
	copy(m.Mac, buf.DecodeBytes(len(m.Mac)))
	m.Bd = buf.DecodeUint32()
	m.IP6 = make([]byte, 16)
	copy(m.IP6, buf.DecodeBytes(len(m.IP6)))
	return nil
}

// OneAddDelNdpEntryReply defines message 'one_add_del_ndp_entry_reply'.
type OneAddDelNdpEntryReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelNdpEntryReply) Reset()               { *m = OneAddDelNdpEntryReply{} }
func (*OneAddDelNdpEntryReply) GetMessageName() string { return "one_add_del_ndp_entry_reply" }
func (*OneAddDelNdpEntryReply) GetCrcString() string   { return "e8d4e804" }
func (*OneAddDelNdpEntryReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelNdpEntryReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelNdpEntryReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelNdpEntryReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelNdpEntryReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAddDelRemoteMapping defines message 'one_add_del_remote_mapping'.
type OneAddDelRemoteMapping struct {
	IsAdd    uint8              `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	IsSrcDst uint8              `binapi:"u8,name=is_src_dst" json:"is_src_dst,omitempty"`
	DelAll   uint8              `binapi:"u8,name=del_all" json:"del_all,omitempty"`
	Vni      uint32             `binapi:"u32,name=vni" json:"vni,omitempty"`
	Action   uint8              `binapi:"u8,name=action" json:"action,omitempty"`
	EidType  uint8              `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid      []byte             `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	EidLen   uint8              `binapi:"u8,name=eid_len" json:"eid_len,omitempty"`
	Seid     []byte             `binapi:"u8[16],name=seid" json:"seid,omitempty"`
	SeidLen  uint8              `binapi:"u8,name=seid_len" json:"seid_len,omitempty"`
	RlocNum  uint32             `binapi:"u32,name=rloc_num" json:"-"`
	Rlocs    []OneRemoteLocator `binapi:"one_remote_locator[rloc_num],name=rlocs" json:"rlocs,omitempty"`
}

func (m *OneAddDelRemoteMapping) Reset()               { *m = OneAddDelRemoteMapping{} }
func (*OneAddDelRemoteMapping) GetMessageName() string { return "one_add_del_remote_mapping" }
func (*OneAddDelRemoteMapping) GetCrcString() string   { return "0b2010ec" }
func (*OneAddDelRemoteMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAddDelRemoteMapping) GetRetVal() error {
	return nil
}

func (m *OneAddDelRemoteMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1      // m.IsSrcDst
	size += 1      // m.DelAll
	size += 4      // m.Vni
	size += 1      // m.Action
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.EidLen
	size += 1 * 16 // m.Seid
	size += 1      // m.SeidLen
	size += 4      // m.RlocNum
	for j1 := 0; j1 < len(m.Rlocs); j1++ {
		var s1 OneRemoteLocator
		_ = s1
		if j1 < len(m.Rlocs) {
			s1 = m.Rlocs[j1]
		}
		size += 1      // s1.IsIP4
		size += 1      // s1.Priority
		size += 1      // s1.Weight
		size += 1 * 16 // s1.Addr
	}
	return size
}
func (m *OneAddDelRemoteMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint8(m.IsSrcDst)
	buf.EncodeUint8(m.DelAll)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.Action)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.EidLen)
	buf.EncodeBytes(m.Seid, 16)
	buf.EncodeUint8(m.SeidLen)
	buf.EncodeUint32(uint32(len(m.Rlocs)))
	for j0 := 0; j0 < len(m.Rlocs); j0++ {
		var v0 OneRemoteLocator // Rlocs
		if j0 < len(m.Rlocs) {
			v0 = m.Rlocs[j0]
		}
		buf.EncodeUint8(v0.IsIP4)
		buf.EncodeUint8(v0.Priority)
		buf.EncodeUint8(v0.Weight)
		buf.EncodeBytes(v0.Addr, 16)
	}
	return buf.Bytes(), nil
}
func (m *OneAddDelRemoteMapping) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.IsSrcDst = buf.DecodeUint8()
	m.DelAll = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.Action = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.EidLen = buf.DecodeUint8()
	m.Seid = make([]byte, 16)
	copy(m.Seid, buf.DecodeBytes(len(m.Seid)))
	m.SeidLen = buf.DecodeUint8()
	m.RlocNum = buf.DecodeUint32()
	m.Rlocs = make([]OneRemoteLocator, m.RlocNum)
	for j0 := 0; j0 < len(m.Rlocs); j0++ {
		m.Rlocs[j0].IsIP4 = buf.DecodeUint8()
		m.Rlocs[j0].Priority = buf.DecodeUint8()
		m.Rlocs[j0].Weight = buf.DecodeUint8()
		m.Rlocs[j0].Addr = make([]byte, 16)
		copy(m.Rlocs[j0].Addr, buf.DecodeBytes(len(m.Rlocs[j0].Addr)))
	}
	return nil
}

// OneAddDelRemoteMappingReply defines message 'one_add_del_remote_mapping_reply'.
type OneAddDelRemoteMappingReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneAddDelRemoteMappingReply) Reset() { *m = OneAddDelRemoteMappingReply{} }
func (*OneAddDelRemoteMappingReply) GetMessageName() string {
	return "one_add_del_remote_mapping_reply"
}
func (*OneAddDelRemoteMappingReply) GetCrcString() string { return "e8d4e804" }
func (*OneAddDelRemoteMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAddDelRemoteMappingReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAddDelRemoteMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneAddDelRemoteMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneAddDelRemoteMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneAdjacenciesGet defines message 'one_adjacencies_get'.
type OneAdjacenciesGet struct {
	Vni uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
}

func (m *OneAdjacenciesGet) Reset()               { *m = OneAdjacenciesGet{} }
func (*OneAdjacenciesGet) GetMessageName() string { return "one_adjacencies_get" }
func (*OneAdjacenciesGet) GetCrcString() string   { return "8d1f2fe9" }
func (*OneAdjacenciesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneAdjacenciesGet) GetRetVal() error {
	return nil
}

func (m *OneAdjacenciesGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	return size
}
func (m *OneAdjacenciesGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	return buf.Bytes(), nil
}
func (m *OneAdjacenciesGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	return nil
}

// OneAdjacenciesGetReply defines message 'one_adjacencies_get_reply'.
type OneAdjacenciesGetReply struct {
	Retval      int32          `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count       uint32         `binapi:"u32,name=count" json:"-"`
	Adjacencies []OneAdjacency `binapi:"one_adjacency[count],name=adjacencies" json:"adjacencies,omitempty"`
}

func (m *OneAdjacenciesGetReply) Reset()               { *m = OneAdjacenciesGetReply{} }
func (*OneAdjacenciesGetReply) GetMessageName() string { return "one_adjacencies_get_reply" }
func (*OneAdjacenciesGetReply) GetCrcString() string   { return "60a3c592" }
func (*OneAdjacenciesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneAdjacenciesGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneAdjacenciesGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Adjacencies); j1++ {
		var s1 OneAdjacency
		_ = s1
		if j1 < len(m.Adjacencies) {
			s1 = m.Adjacencies[j1]
		}
		size += 1      // s1.EidType
		size += 1 * 16 // s1.Reid
		size += 1 * 16 // s1.Leid
		size += 1      // s1.ReidPrefixLen
		size += 1      // s1.LeidPrefixLen
	}
	return size
}
func (m *OneAdjacenciesGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Adjacencies)))
	for j0 := 0; j0 < len(m.Adjacencies); j0++ {
		var v0 OneAdjacency // Adjacencies
		if j0 < len(m.Adjacencies) {
			v0 = m.Adjacencies[j0]
		}
		buf.EncodeUint8(v0.EidType)
		buf.EncodeBytes(v0.Reid, 16)
		buf.EncodeBytes(v0.Leid, 16)
		buf.EncodeUint8(v0.ReidPrefixLen)
		buf.EncodeUint8(v0.LeidPrefixLen)
	}
	return buf.Bytes(), nil
}
func (m *OneAdjacenciesGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.Adjacencies = make([]OneAdjacency, m.Count)
	for j0 := 0; j0 < len(m.Adjacencies); j0++ {
		m.Adjacencies[j0].EidType = buf.DecodeUint8()
		m.Adjacencies[j0].Reid = make([]byte, 16)
		copy(m.Adjacencies[j0].Reid, buf.DecodeBytes(len(m.Adjacencies[j0].Reid)))
		m.Adjacencies[j0].Leid = make([]byte, 16)
		copy(m.Adjacencies[j0].Leid, buf.DecodeBytes(len(m.Adjacencies[j0].Leid)))
		m.Adjacencies[j0].ReidPrefixLen = buf.DecodeUint8()
		m.Adjacencies[j0].LeidPrefixLen = buf.DecodeUint8()
	}
	return nil
}

// OneEidTableAddDelMap defines message 'one_eid_table_add_del_map'.
type OneEidTableAddDelMap struct {
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	DpTable uint32 `binapi:"u32,name=dp_table" json:"dp_table,omitempty"`
	IsL2    uint8  `binapi:"u8,name=is_l2" json:"is_l2,omitempty"`
}

func (m *OneEidTableAddDelMap) Reset()               { *m = OneEidTableAddDelMap{} }
func (*OneEidTableAddDelMap) GetMessageName() string { return "one_eid_table_add_del_map" }
func (*OneEidTableAddDelMap) GetCrcString() string   { return "59e9975e" }
func (*OneEidTableAddDelMap) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEidTableAddDelMap) GetRetVal() error {
	return nil
}

func (m *OneEidTableAddDelMap) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsAdd
	size += 4 // m.Vni
	size += 4 // m.DpTable
	size += 1 // m.IsL2
	return size
}
func (m *OneEidTableAddDelMap) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint32(m.DpTable)
	buf.EncodeUint8(m.IsL2)
	return buf.Bytes(), nil
}
func (m *OneEidTableAddDelMap) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.DpTable = buf.DecodeUint32()
	m.IsL2 = buf.DecodeUint8()
	return nil
}

// OneEidTableAddDelMapReply defines message 'one_eid_table_add_del_map_reply'.
type OneEidTableAddDelMapReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneEidTableAddDelMapReply) Reset()               { *m = OneEidTableAddDelMapReply{} }
func (*OneEidTableAddDelMapReply) GetMessageName() string { return "one_eid_table_add_del_map_reply" }
func (*OneEidTableAddDelMapReply) GetCrcString() string   { return "e8d4e804" }
func (*OneEidTableAddDelMapReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEidTableAddDelMapReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneEidTableAddDelMapReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneEidTableAddDelMapReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneEidTableAddDelMapReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneEidTableDetails defines message 'one_eid_table_details'.
type OneEidTableDetails struct {
	LocatorSetIndex uint32 `binapi:"u32,name=locator_set_index" json:"locator_set_index,omitempty"`
	Action          uint8  `binapi:"u8,name=action" json:"action,omitempty"`
	IsLocal         uint8  `binapi:"u8,name=is_local" json:"is_local,omitempty"`
	EidType         uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	IsSrcDst        uint8  `binapi:"u8,name=is_src_dst" json:"is_src_dst,omitempty"`
	Vni             uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	Eid             []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	EidPrefixLen    uint8  `binapi:"u8,name=eid_prefix_len" json:"eid_prefix_len,omitempty"`
	Seid            []byte `binapi:"u8[16],name=seid" json:"seid,omitempty"`
	SeidPrefixLen   uint8  `binapi:"u8,name=seid_prefix_len" json:"seid_prefix_len,omitempty"`
	TTL             uint32 `binapi:"u32,name=ttl" json:"ttl,omitempty"`
	Authoritative   uint8  `binapi:"u8,name=authoritative" json:"authoritative,omitempty"`
	KeyID           uint16 `binapi:"u16,name=key_id" json:"key_id,omitempty"`
	Key             []byte `binapi:"u8[64],name=key" json:"key,omitempty"`
}

func (m *OneEidTableDetails) Reset()               { *m = OneEidTableDetails{} }
func (*OneEidTableDetails) GetMessageName() string { return "one_eid_table_details" }
func (*OneEidTableDetails) GetCrcString() string   { return "dcd9f414" }
func (*OneEidTableDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEidTableDetails) GetRetVal() error {
	return nil
}

func (m *OneEidTableDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LocatorSetIndex
	size += 1      // m.Action
	size += 1      // m.IsLocal
	size += 1      // m.EidType
	size += 1      // m.IsSrcDst
	size += 4      // m.Vni
	size += 1 * 16 // m.Eid
	size += 1      // m.EidPrefixLen
	size += 1 * 16 // m.Seid
	size += 1      // m.SeidPrefixLen
	size += 4      // m.TTL
	size += 1      // m.Authoritative
	size += 2      // m.KeyID
	size += 1 * 64 // m.Key
	return size
}
func (m *OneEidTableDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LocatorSetIndex)
	buf.EncodeUint8(m.Action)
	buf.EncodeUint8(m.IsLocal)
	buf.EncodeUint8(m.EidType)
	buf.EncodeUint8(m.IsSrcDst)
	buf.EncodeUint32(m.Vni)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.EidPrefixLen)
	buf.EncodeBytes(m.Seid, 16)
	buf.EncodeUint8(m.SeidPrefixLen)
	buf.EncodeUint32(m.TTL)
	buf.EncodeUint8(m.Authoritative)
	buf.EncodeUint16(m.KeyID)
	buf.EncodeBytes(m.Key, 64)
	return buf.Bytes(), nil
}
func (m *OneEidTableDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LocatorSetIndex = buf.DecodeUint32()
	m.Action = buf.DecodeUint8()
	m.IsLocal = buf.DecodeUint8()
	m.EidType = buf.DecodeUint8()
	m.IsSrcDst = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.EidPrefixLen = buf.DecodeUint8()
	m.Seid = make([]byte, 16)
	copy(m.Seid, buf.DecodeBytes(len(m.Seid)))
	m.SeidPrefixLen = buf.DecodeUint8()
	m.TTL = buf.DecodeUint32()
	m.Authoritative = buf.DecodeUint8()
	m.KeyID = buf.DecodeUint16()
	m.Key = make([]byte, 64)
	copy(m.Key, buf.DecodeBytes(len(m.Key)))
	return nil
}

// OneEidTableDump defines message 'one_eid_table_dump'.
type OneEidTableDump struct {
	EidSet       uint8  `binapi:"u8,name=eid_set" json:"eid_set,omitempty"`
	PrefixLength uint8  `binapi:"u8,name=prefix_length" json:"prefix_length,omitempty"`
	Vni          uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	EidType      uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Eid          []byte `binapi:"u8[16],name=eid" json:"eid,omitempty"`
	Filter       uint8  `binapi:"u8,name=filter" json:"filter,omitempty"`
}

func (m *OneEidTableDump) Reset()               { *m = OneEidTableDump{} }
func (*OneEidTableDump) GetMessageName() string { return "one_eid_table_dump" }
func (*OneEidTableDump) GetCrcString() string   { return "e0df64da" }
func (*OneEidTableDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEidTableDump) GetRetVal() error {
	return nil
}

func (m *OneEidTableDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.EidSet
	size += 1      // m.PrefixLength
	size += 4      // m.Vni
	size += 1      // m.EidType
	size += 1 * 16 // m.Eid
	size += 1      // m.Filter
	return size
}
func (m *OneEidTableDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.EidSet)
	buf.EncodeUint8(m.PrefixLength)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Eid, 16)
	buf.EncodeUint8(m.Filter)
	return buf.Bytes(), nil
}
func (m *OneEidTableDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EidSet = buf.DecodeUint8()
	m.PrefixLength = buf.DecodeUint8()
	m.Vni = buf.DecodeUint32()
	m.EidType = buf.DecodeUint8()
	m.Eid = make([]byte, 16)
	copy(m.Eid, buf.DecodeBytes(len(m.Eid)))
	m.Filter = buf.DecodeUint8()
	return nil
}

// OneEidTableMapDetails defines message 'one_eid_table_map_details'.
type OneEidTableMapDetails struct {
	Vni     uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	DpTable uint32 `binapi:"u32,name=dp_table" json:"dp_table,omitempty"`
}

func (m *OneEidTableMapDetails) Reset()               { *m = OneEidTableMapDetails{} }
func (*OneEidTableMapDetails) GetMessageName() string { return "one_eid_table_map_details" }
func (*OneEidTableMapDetails) GetCrcString() string   { return "0b6859e2" }
func (*OneEidTableMapDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEidTableMapDetails) GetRetVal() error {
	return nil
}

func (m *OneEidTableMapDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	size += 4 // m.DpTable
	return size
}
func (m *OneEidTableMapDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint32(m.DpTable)
	return buf.Bytes(), nil
}
func (m *OneEidTableMapDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	m.DpTable = buf.DecodeUint32()
	return nil
}

// OneEidTableMapDump defines message 'one_eid_table_map_dump'.
type OneEidTableMapDump struct {
	IsL2 uint8 `binapi:"u8,name=is_l2" json:"is_l2,omitempty"`
}

func (m *OneEidTableMapDump) Reset()               { *m = OneEidTableMapDump{} }
func (*OneEidTableMapDump) GetMessageName() string { return "one_eid_table_map_dump" }
func (*OneEidTableMapDump) GetCrcString() string   { return "67c54650" }
func (*OneEidTableMapDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEidTableMapDump) GetRetVal() error {
	return nil
}

func (m *OneEidTableMapDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsL2
	return size
}
func (m *OneEidTableMapDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsL2)
	return buf.Bytes(), nil
}
func (m *OneEidTableMapDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsL2 = buf.DecodeUint8()
	return nil
}

// OneEidTableVniDetails defines message 'one_eid_table_vni_details'.
type OneEidTableVniDetails struct {
	Vni uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
}

func (m *OneEidTableVniDetails) Reset()               { *m = OneEidTableVniDetails{} }
func (*OneEidTableVniDetails) GetMessageName() string { return "one_eid_table_vni_details" }
func (*OneEidTableVniDetails) GetCrcString() string   { return "64abc01e" }
func (*OneEidTableVniDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEidTableVniDetails) GetRetVal() error {
	return nil
}

func (m *OneEidTableVniDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Vni
	return size
}
func (m *OneEidTableVniDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	return buf.Bytes(), nil
}
func (m *OneEidTableVniDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	return nil
}

// OneEidTableVniDump defines message 'one_eid_table_vni_dump'.
type OneEidTableVniDump struct{}

func (m *OneEidTableVniDump) Reset()               { *m = OneEidTableVniDump{} }
func (*OneEidTableVniDump) GetMessageName() string { return "one_eid_table_vni_dump" }
func (*OneEidTableVniDump) GetCrcString() string   { return "51077d14" }
func (*OneEidTableVniDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEidTableVniDump) GetRetVal() error {
	return nil
}

func (m *OneEidTableVniDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneEidTableVniDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneEidTableVniDump) Unmarshal(b []byte) error {
	return nil
}

// OneEnableDisable defines message 'one_enable_disable'.
type OneEnableDisable struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneEnableDisable) Reset()               { *m = OneEnableDisable{} }
func (*OneEnableDisable) GetMessageName() string { return "one_enable_disable" }
func (*OneEnableDisable) GetCrcString() string   { return "eb0e943b" }
func (*OneEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEnableDisable) GetRetVal() error {
	return nil
}

func (m *OneEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *OneEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneEnableDisablePetrMode defines message 'one_enable_disable_petr_mode'.
type OneEnableDisablePetrMode struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneEnableDisablePetrMode) Reset()               { *m = OneEnableDisablePetrMode{} }
func (*OneEnableDisablePetrMode) GetMessageName() string { return "one_enable_disable_petr_mode" }
func (*OneEnableDisablePetrMode) GetCrcString() string   { return "eb0e943b" }
func (*OneEnableDisablePetrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEnableDisablePetrMode) GetRetVal() error {
	return nil
}

func (m *OneEnableDisablePetrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *OneEnableDisablePetrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneEnableDisablePetrMode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneEnableDisablePetrModeReply defines message 'one_enable_disable_petr_mode_reply'.
type OneEnableDisablePetrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneEnableDisablePetrModeReply) Reset() { *m = OneEnableDisablePetrModeReply{} }
func (*OneEnableDisablePetrModeReply) GetMessageName() string {
	return "one_enable_disable_petr_mode_reply"
}
func (*OneEnableDisablePetrModeReply) GetCrcString() string { return "e8d4e804" }
func (*OneEnableDisablePetrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEnableDisablePetrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneEnableDisablePetrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneEnableDisablePetrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneEnableDisablePetrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneEnableDisablePitrMode defines message 'one_enable_disable_pitr_mode'.
type OneEnableDisablePitrMode struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneEnableDisablePitrMode) Reset()               { *m = OneEnableDisablePitrMode{} }
func (*OneEnableDisablePitrMode) GetMessageName() string { return "one_enable_disable_pitr_mode" }
func (*OneEnableDisablePitrMode) GetCrcString() string   { return "eb0e943b" }
func (*OneEnableDisablePitrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEnableDisablePitrMode) GetRetVal() error {
	return nil
}

func (m *OneEnableDisablePitrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *OneEnableDisablePitrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneEnableDisablePitrMode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneEnableDisablePitrModeReply defines message 'one_enable_disable_pitr_mode_reply'.
type OneEnableDisablePitrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneEnableDisablePitrModeReply) Reset() { *m = OneEnableDisablePitrModeReply{} }
func (*OneEnableDisablePitrModeReply) GetMessageName() string {
	return "one_enable_disable_pitr_mode_reply"
}
func (*OneEnableDisablePitrModeReply) GetCrcString() string { return "e8d4e804" }
func (*OneEnableDisablePitrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEnableDisablePitrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneEnableDisablePitrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneEnableDisablePitrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneEnableDisablePitrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneEnableDisableReply defines message 'one_enable_disable_reply'.
type OneEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneEnableDisableReply) Reset()               { *m = OneEnableDisableReply{} }
func (*OneEnableDisableReply) GetMessageName() string { return "one_enable_disable_reply" }
func (*OneEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*OneEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneEnableDisableXtrMode defines message 'one_enable_disable_xtr_mode'.
type OneEnableDisableXtrMode struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneEnableDisableXtrMode) Reset()               { *m = OneEnableDisableXtrMode{} }
func (*OneEnableDisableXtrMode) GetMessageName() string { return "one_enable_disable_xtr_mode" }
func (*OneEnableDisableXtrMode) GetCrcString() string   { return "eb0e943b" }
func (*OneEnableDisableXtrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneEnableDisableXtrMode) GetRetVal() error {
	return nil
}

func (m *OneEnableDisableXtrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *OneEnableDisableXtrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneEnableDisableXtrMode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneEnableDisableXtrModeReply defines message 'one_enable_disable_xtr_mode_reply'.
type OneEnableDisableXtrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneEnableDisableXtrModeReply) Reset() { *m = OneEnableDisableXtrModeReply{} }
func (*OneEnableDisableXtrModeReply) GetMessageName() string {
	return "one_enable_disable_xtr_mode_reply"
}
func (*OneEnableDisableXtrModeReply) GetCrcString() string { return "e8d4e804" }
func (*OneEnableDisableXtrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneEnableDisableXtrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneEnableDisableXtrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneEnableDisableXtrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneEnableDisableXtrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneGetMapRequestItrRlocs defines message 'one_get_map_request_itr_rlocs'.
type OneGetMapRequestItrRlocs struct{}

func (m *OneGetMapRequestItrRlocs) Reset()               { *m = OneGetMapRequestItrRlocs{} }
func (*OneGetMapRequestItrRlocs) GetMessageName() string { return "one_get_map_request_itr_rlocs" }
func (*OneGetMapRequestItrRlocs) GetCrcString() string   { return "51077d14" }
func (*OneGetMapRequestItrRlocs) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneGetMapRequestItrRlocs) GetRetVal() error {
	return nil
}

func (m *OneGetMapRequestItrRlocs) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneGetMapRequestItrRlocs) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneGetMapRequestItrRlocs) Unmarshal(b []byte) error {
	return nil
}

// OneGetMapRequestItrRlocsReply defines message 'one_get_map_request_itr_rlocs_reply'.
type OneGetMapRequestItrRlocsReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *OneGetMapRequestItrRlocsReply) Reset() { *m = OneGetMapRequestItrRlocsReply{} }
func (*OneGetMapRequestItrRlocsReply) GetMessageName() string {
	return "one_get_map_request_itr_rlocs_reply"
}
func (*OneGetMapRequestItrRlocsReply) GetCrcString() string { return "9f56f6f7" }
func (*OneGetMapRequestItrRlocsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneGetMapRequestItrRlocsReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneGetMapRequestItrRlocsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *OneGetMapRequestItrRlocsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *OneGetMapRequestItrRlocsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// OneGetTransportProtocol defines message 'one_get_transport_protocol'.
type OneGetTransportProtocol struct{}

func (m *OneGetTransportProtocol) Reset()               { *m = OneGetTransportProtocol{} }
func (*OneGetTransportProtocol) GetMessageName() string { return "one_get_transport_protocol" }
func (*OneGetTransportProtocol) GetCrcString() string   { return "51077d14" }
func (*OneGetTransportProtocol) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneGetTransportProtocol) GetRetVal() error {
	return nil
}

func (m *OneGetTransportProtocol) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneGetTransportProtocol) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneGetTransportProtocol) Unmarshal(b []byte) error {
	return nil
}

// OneGetTransportProtocolReply defines message 'one_get_transport_protocol_reply'.
type OneGetTransportProtocolReply struct {
	Retval   int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	Protocol uint8 `binapi:"u8,name=protocol" json:"protocol,omitempty"`
}

func (m *OneGetTransportProtocolReply) Reset() { *m = OneGetTransportProtocolReply{} }
func (*OneGetTransportProtocolReply) GetMessageName() string {
	return "one_get_transport_protocol_reply"
}
func (*OneGetTransportProtocolReply) GetCrcString() string { return "62a28eb3" }
func (*OneGetTransportProtocolReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneGetTransportProtocolReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneGetTransportProtocolReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.Protocol
	return size
}
func (m *OneGetTransportProtocolReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Protocol)
	return buf.Bytes(), nil
}
func (m *OneGetTransportProtocolReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Protocol = buf.DecodeUint8()
	return nil
}

// OneL2ArpBdGet defines message 'one_l2_arp_bd_get'.
type OneL2ArpBdGet struct{}

func (m *OneL2ArpBdGet) Reset()               { *m = OneL2ArpBdGet{} }
func (*OneL2ArpBdGet) GetMessageName() string { return "one_l2_arp_bd_get" }
func (*OneL2ArpBdGet) GetCrcString() string   { return "51077d14" }
func (*OneL2ArpBdGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneL2ArpBdGet) GetRetVal() error {
	return nil
}

func (m *OneL2ArpBdGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneL2ArpBdGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneL2ArpBdGet) Unmarshal(b []byte) error {
	return nil
}

// OneL2ArpBdGetReply defines message 'one_l2_arp_bd_get_reply'.
type OneL2ArpBdGetReply struct {
	Retval        int32    `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count         uint32   `binapi:"u32,name=count" json:"-"`
	BridgeDomains []uint32 `binapi:"u32[count],name=bridge_domains" json:"bridge_domains,omitempty"`
}

func (m *OneL2ArpBdGetReply) Reset()               { *m = OneL2ArpBdGetReply{} }
func (*OneL2ArpBdGetReply) GetMessageName() string { return "one_l2_arp_bd_get_reply" }
func (*OneL2ArpBdGetReply) GetCrcString() string   { return "221ac888" }
func (*OneL2ArpBdGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneL2ArpBdGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneL2ArpBdGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                        // m.Retval
	size += 4                        // m.Count
	size += 4 * len(m.BridgeDomains) // m.BridgeDomains
	return size
}
func (m *OneL2ArpBdGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.BridgeDomains)))
	for i := 0; i < len(m.BridgeDomains); i++ {
		var x uint32
		if i < len(m.BridgeDomains) {
			x = uint32(m.BridgeDomains[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *OneL2ArpBdGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.BridgeDomains = make([]uint32, m.Count)
	for i := 0; i < len(m.BridgeDomains); i++ {
		m.BridgeDomains[i] = buf.DecodeUint32()
	}
	return nil
}

// OneL2ArpEntriesGet defines message 'one_l2_arp_entries_get'.
type OneL2ArpEntriesGet struct {
	Bd uint32 `binapi:"u32,name=bd" json:"bd,omitempty"`
}

func (m *OneL2ArpEntriesGet) Reset()               { *m = OneL2ArpEntriesGet{} }
func (*OneL2ArpEntriesGet) GetMessageName() string { return "one_l2_arp_entries_get" }
func (*OneL2ArpEntriesGet) GetCrcString() string   { return "4d418cf4" }
func (*OneL2ArpEntriesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneL2ArpEntriesGet) GetRetVal() error {
	return nil
}

func (m *OneL2ArpEntriesGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Bd
	return size
}
func (m *OneL2ArpEntriesGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Bd)
	return buf.Bytes(), nil
}
func (m *OneL2ArpEntriesGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Bd = buf.DecodeUint32()
	return nil
}

// OneL2ArpEntriesGetReply defines message 'one_l2_arp_entries_get_reply'.
type OneL2ArpEntriesGetReply struct {
	Retval  int32           `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count   uint32          `binapi:"u32,name=count" json:"-"`
	Entries []OneL2ArpEntry `binapi:"one_l2_arp_entry[count],name=entries" json:"entries,omitempty"`
}

func (m *OneL2ArpEntriesGetReply) Reset()               { *m = OneL2ArpEntriesGetReply{} }
func (*OneL2ArpEntriesGetReply) GetMessageName() string { return "one_l2_arp_entries_get_reply" }
func (*OneL2ArpEntriesGetReply) GetCrcString() string   { return "88e54ded" }
func (*OneL2ArpEntriesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneL2ArpEntriesGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneL2ArpEntriesGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Entries); j1++ {
		var s1 OneL2ArpEntry
		_ = s1
		if j1 < len(m.Entries) {
			s1 = m.Entries[j1]
		}
		size += 1 * 6 // s1.Mac
		size += 4     // s1.IP4
	}
	return size
}
func (m *OneL2ArpEntriesGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Entries)))
	for j0 := 0; j0 < len(m.Entries); j0++ {
		var v0 OneL2ArpEntry // Entries
		if j0 < len(m.Entries) {
			v0 = m.Entries[j0]
		}
		buf.EncodeBytes(v0.Mac, 6)
		buf.EncodeUint32(v0.IP4)
	}
	return buf.Bytes(), nil
}
func (m *OneL2ArpEntriesGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.Entries = make([]OneL2ArpEntry, m.Count)
	for j0 := 0; j0 < len(m.Entries); j0++ {
		m.Entries[j0].Mac = make([]byte, 6)
		copy(m.Entries[j0].Mac, buf.DecodeBytes(len(m.Entries[j0].Mac)))
		m.Entries[j0].IP4 = buf.DecodeUint32()
	}
	return nil
}

// OneLocatorDetails defines message 'one_locator_details'.
type OneLocatorDetails struct {
	Local     uint8  `binapi:"u8,name=local" json:"local,omitempty"`
	SwIfIndex uint32 `binapi:"u32,name=sw_if_index" json:"sw_if_index,omitempty"`
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
	Priority  uint8  `binapi:"u8,name=priority" json:"priority,omitempty"`
	Weight    uint8  `binapi:"u8,name=weight" json:"weight,omitempty"`
}

func (m *OneLocatorDetails) Reset()               { *m = OneLocatorDetails{} }
func (*OneLocatorDetails) GetMessageName() string { return "one_locator_details" }
func (*OneLocatorDetails) GetCrcString() string   { return "b3988a30" }
func (*OneLocatorDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneLocatorDetails) GetRetVal() error {
	return nil
}

func (m *OneLocatorDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.Local
	size += 4      // m.SwIfIndex
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	size += 1      // m.Priority
	size += 1      // m.Weight
	return size
}
func (m *OneLocatorDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Local)
	buf.EncodeUint32(m.SwIfIndex)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	buf.EncodeUint8(m.Priority)
	buf.EncodeUint8(m.Weight)
	return buf.Bytes(), nil
}
func (m *OneLocatorDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Local = buf.DecodeUint8()
	m.SwIfIndex = buf.DecodeUint32()
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	m.Priority = buf.DecodeUint8()
	m.Weight = buf.DecodeUint8()
	return nil
}

// OneLocatorDump defines message 'one_locator_dump'.
type OneLocatorDump struct {
	LsIndex    uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
	LsName     []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
	IsIndexSet uint8  `binapi:"u8,name=is_index_set" json:"is_index_set,omitempty"`
}

func (m *OneLocatorDump) Reset()               { *m = OneLocatorDump{} }
func (*OneLocatorDump) GetMessageName() string { return "one_locator_dump" }
func (*OneLocatorDump) GetCrcString() string   { return "f27d5050" }
func (*OneLocatorDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneLocatorDump) GetRetVal() error {
	return nil
}

func (m *OneLocatorDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LsIndex
	size += 1 * 64 // m.LsName
	size += 1      // m.IsIndexSet
	return size
}
func (m *OneLocatorDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LsIndex)
	buf.EncodeBytes(m.LsName, 64)
	buf.EncodeUint8(m.IsIndexSet)
	return buf.Bytes(), nil
}
func (m *OneLocatorDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LsIndex = buf.DecodeUint32()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	m.IsIndexSet = buf.DecodeUint8()
	return nil
}

// OneLocatorSetDetails defines message 'one_locator_set_details'.
type OneLocatorSetDetails struct {
	LsIndex uint32 `binapi:"u32,name=ls_index" json:"ls_index,omitempty"`
	LsName  []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
}

func (m *OneLocatorSetDetails) Reset()               { *m = OneLocatorSetDetails{} }
func (*OneLocatorSetDetails) GetMessageName() string { return "one_locator_set_details" }
func (*OneLocatorSetDetails) GetCrcString() string   { return "6b846882" }
func (*OneLocatorSetDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneLocatorSetDetails) GetRetVal() error {
	return nil
}

func (m *OneLocatorSetDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.LsIndex
	size += 1 * 64 // m.LsName
	return size
}
func (m *OneLocatorSetDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.LsIndex)
	buf.EncodeBytes(m.LsName, 64)
	return buf.Bytes(), nil
}
func (m *OneLocatorSetDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.LsIndex = buf.DecodeUint32()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	return nil
}

// OneLocatorSetDump defines message 'one_locator_set_dump'.
type OneLocatorSetDump struct {
	Filter uint8 `binapi:"u8,name=filter" json:"filter,omitempty"`
}

func (m *OneLocatorSetDump) Reset()               { *m = OneLocatorSetDump{} }
func (*OneLocatorSetDump) GetMessageName() string { return "one_locator_set_dump" }
func (*OneLocatorSetDump) GetCrcString() string   { return "c79e8ab0" }
func (*OneLocatorSetDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneLocatorSetDump) GetRetVal() error {
	return nil
}

func (m *OneLocatorSetDump) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Filter
	return size
}
func (m *OneLocatorSetDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Filter)
	return buf.Bytes(), nil
}
func (m *OneLocatorSetDump) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Filter = buf.DecodeUint8()
	return nil
}

// OneMapRegisterEnableDisable defines message 'one_map_register_enable_disable'.
type OneMapRegisterEnableDisable struct {
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *OneMapRegisterEnableDisable) Reset()               { *m = OneMapRegisterEnableDisable{} }
func (*OneMapRegisterEnableDisable) GetMessageName() string { return "one_map_register_enable_disable" }
func (*OneMapRegisterEnableDisable) GetCrcString() string   { return "294103d1" }
func (*OneMapRegisterEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapRegisterEnableDisable) GetRetVal() error {
	return nil
}

func (m *OneMapRegisterEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEnabled
	return size
}
func (m *OneMapRegisterEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// OneMapRegisterEnableDisableReply defines message 'one_map_register_enable_disable_reply'.
type OneMapRegisterEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneMapRegisterEnableDisableReply) Reset() { *m = OneMapRegisterEnableDisableReply{} }
func (*OneMapRegisterEnableDisableReply) GetMessageName() string {
	return "one_map_register_enable_disable_reply"
}
func (*OneMapRegisterEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*OneMapRegisterEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapRegisterEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneMapRegisterEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneMapRegisterEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneMapRegisterFallbackThreshold defines message 'one_map_register_fallback_threshold'.
type OneMapRegisterFallbackThreshold struct {
	Value uint32 `binapi:"u32,name=value" json:"value,omitempty"`
}

func (m *OneMapRegisterFallbackThreshold) Reset() { *m = OneMapRegisterFallbackThreshold{} }
func (*OneMapRegisterFallbackThreshold) GetMessageName() string {
	return "one_map_register_fallback_threshold"
}
func (*OneMapRegisterFallbackThreshold) GetCrcString() string { return "f7d4a475" }
func (*OneMapRegisterFallbackThreshold) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapRegisterFallbackThreshold) GetRetVal() error {
	return nil
}

func (m *OneMapRegisterFallbackThreshold) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Value
	return size
}
func (m *OneMapRegisterFallbackThreshold) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Value)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterFallbackThreshold) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Value = buf.DecodeUint32()
	return nil
}

// OneMapRegisterFallbackThresholdReply defines message 'one_map_register_fallback_threshold_reply'.
type OneMapRegisterFallbackThresholdReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneMapRegisterFallbackThresholdReply) Reset() { *m = OneMapRegisterFallbackThresholdReply{} }
func (*OneMapRegisterFallbackThresholdReply) GetMessageName() string {
	return "one_map_register_fallback_threshold_reply"
}
func (*OneMapRegisterFallbackThresholdReply) GetCrcString() string { return "e8d4e804" }
func (*OneMapRegisterFallbackThresholdReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapRegisterFallbackThresholdReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneMapRegisterFallbackThresholdReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneMapRegisterFallbackThresholdReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterFallbackThresholdReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneMapRegisterSetTTL defines message 'one_map_register_set_ttl'.
type OneMapRegisterSetTTL struct {
	TTL uint32 `binapi:"u32,name=ttl" json:"ttl,omitempty"`
}

func (m *OneMapRegisterSetTTL) Reset()               { *m = OneMapRegisterSetTTL{} }
func (*OneMapRegisterSetTTL) GetMessageName() string { return "one_map_register_set_ttl" }
func (*OneMapRegisterSetTTL) GetCrcString() string   { return "dd59f1f3" }
func (*OneMapRegisterSetTTL) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapRegisterSetTTL) GetRetVal() error {
	return nil
}

func (m *OneMapRegisterSetTTL) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.TTL
	return size
}
func (m *OneMapRegisterSetTTL) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.TTL)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterSetTTL) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.TTL = buf.DecodeUint32()
	return nil
}

// OneMapRegisterSetTTLReply defines message 'one_map_register_set_ttl_reply'.
type OneMapRegisterSetTTLReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneMapRegisterSetTTLReply) Reset()               { *m = OneMapRegisterSetTTLReply{} }
func (*OneMapRegisterSetTTLReply) GetMessageName() string { return "one_map_register_set_ttl_reply" }
func (*OneMapRegisterSetTTLReply) GetCrcString() string   { return "e8d4e804" }
func (*OneMapRegisterSetTTLReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapRegisterSetTTLReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneMapRegisterSetTTLReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneMapRegisterSetTTLReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneMapRegisterSetTTLReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneMapRequestMode defines message 'one_map_request_mode'.
type OneMapRequestMode struct {
	Mode uint8 `binapi:"u8,name=mode" json:"mode,omitempty"`
}

func (m *OneMapRequestMode) Reset()               { *m = OneMapRequestMode{} }
func (*OneMapRequestMode) GetMessageName() string { return "one_map_request_mode" }
func (*OneMapRequestMode) GetCrcString() string   { return "f3f93ce9" }
func (*OneMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapRequestMode) GetRetVal() error {
	return nil
}

func (m *OneMapRequestMode) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Mode
	return size
}
func (m *OneMapRequestMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Mode)
	return buf.Bytes(), nil
}
func (m *OneMapRequestMode) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Mode = buf.DecodeUint8()
	return nil
}

// OneMapRequestModeReply defines message 'one_map_request_mode_reply'.
type OneMapRequestModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneMapRequestModeReply) Reset()               { *m = OneMapRequestModeReply{} }
func (*OneMapRequestModeReply) GetMessageName() string { return "one_map_request_mode_reply" }
func (*OneMapRequestModeReply) GetCrcString() string   { return "e8d4e804" }
func (*OneMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapRequestModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneMapRequestModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneMapRequestModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneMapRequestModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneMapResolverDetails defines message 'one_map_resolver_details'.
type OneMapResolverDetails struct {
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *OneMapResolverDetails) Reset()               { *m = OneMapResolverDetails{} }
func (*OneMapResolverDetails) GetMessageName() string { return "one_map_resolver_details" }
func (*OneMapResolverDetails) GetCrcString() string   { return "60a5f5ca" }
func (*OneMapResolverDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapResolverDetails) GetRetVal() error {
	return nil
}

func (m *OneMapResolverDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *OneMapResolverDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *OneMapResolverDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// OneMapResolverDump defines message 'one_map_resolver_dump'.
type OneMapResolverDump struct{}

func (m *OneMapResolverDump) Reset()               { *m = OneMapResolverDump{} }
func (*OneMapResolverDump) GetMessageName() string { return "one_map_resolver_dump" }
func (*OneMapResolverDump) GetCrcString() string   { return "51077d14" }
func (*OneMapResolverDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapResolverDump) GetRetVal() error {
	return nil
}

func (m *OneMapResolverDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneMapResolverDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneMapResolverDump) Unmarshal(b []byte) error {
	return nil
}

// OneMapServerDetails defines message 'one_map_server_details'.
type OneMapServerDetails struct {
	IsIPv6    uint8  `binapi:"u8,name=is_ipv6" json:"is_ipv6,omitempty"`
	IPAddress []byte `binapi:"u8[16],name=ip_address" json:"ip_address,omitempty"`
}

func (m *OneMapServerDetails) Reset()               { *m = OneMapServerDetails{} }
func (*OneMapServerDetails) GetMessageName() string { return "one_map_server_details" }
func (*OneMapServerDetails) GetCrcString() string   { return "60a5f5ca" }
func (*OneMapServerDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneMapServerDetails) GetRetVal() error {
	return nil
}

func (m *OneMapServerDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIPv6
	size += 1 * 16 // m.IPAddress
	return size
}
func (m *OneMapServerDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIPv6)
	buf.EncodeBytes(m.IPAddress, 16)
	return buf.Bytes(), nil
}
func (m *OneMapServerDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIPv6 = buf.DecodeUint8()
	m.IPAddress = make([]byte, 16)
	copy(m.IPAddress, buf.DecodeBytes(len(m.IPAddress)))
	return nil
}

// OneMapServerDump defines message 'one_map_server_dump'.
type OneMapServerDump struct{}

func (m *OneMapServerDump) Reset()               { *m = OneMapServerDump{} }
func (*OneMapServerDump) GetMessageName() string { return "one_map_server_dump" }
func (*OneMapServerDump) GetCrcString() string   { return "51077d14" }
func (*OneMapServerDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneMapServerDump) GetRetVal() error {
	return nil
}

func (m *OneMapServerDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneMapServerDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneMapServerDump) Unmarshal(b []byte) error {
	return nil
}

// OneNdpBdGet defines message 'one_ndp_bd_get'.
type OneNdpBdGet struct{}

func (m *OneNdpBdGet) Reset()               { *m = OneNdpBdGet{} }
func (*OneNdpBdGet) GetMessageName() string { return "one_ndp_bd_get" }
func (*OneNdpBdGet) GetCrcString() string   { return "51077d14" }
func (*OneNdpBdGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneNdpBdGet) GetRetVal() error {
	return nil
}

func (m *OneNdpBdGet) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneNdpBdGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneNdpBdGet) Unmarshal(b []byte) error {
	return nil
}

// OneNdpBdGetReply defines message 'one_ndp_bd_get_reply'.
type OneNdpBdGetReply struct {
	Retval        int32    `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count         uint32   `binapi:"u32,name=count" json:"-"`
	BridgeDomains []uint32 `binapi:"u32[count],name=bridge_domains" json:"bridge_domains,omitempty"`
}

func (m *OneNdpBdGetReply) Reset()               { *m = OneNdpBdGetReply{} }
func (*OneNdpBdGetReply) GetMessageName() string { return "one_ndp_bd_get_reply" }
func (*OneNdpBdGetReply) GetCrcString() string   { return "221ac888" }
func (*OneNdpBdGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneNdpBdGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneNdpBdGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                        // m.Retval
	size += 4                        // m.Count
	size += 4 * len(m.BridgeDomains) // m.BridgeDomains
	return size
}
func (m *OneNdpBdGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.BridgeDomains)))
	for i := 0; i < len(m.BridgeDomains); i++ {
		var x uint32
		if i < len(m.BridgeDomains) {
			x = uint32(m.BridgeDomains[i])
		}
		buf.EncodeUint32(x)
	}
	return buf.Bytes(), nil
}
func (m *OneNdpBdGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.BridgeDomains = make([]uint32, m.Count)
	for i := 0; i < len(m.BridgeDomains); i++ {
		m.BridgeDomains[i] = buf.DecodeUint32()
	}
	return nil
}

// OneNdpEntriesGet defines message 'one_ndp_entries_get'.
type OneNdpEntriesGet struct {
	Bd uint32 `binapi:"u32,name=bd" json:"bd,omitempty"`
}

func (m *OneNdpEntriesGet) Reset()               { *m = OneNdpEntriesGet{} }
func (*OneNdpEntriesGet) GetMessageName() string { return "one_ndp_entries_get" }
func (*OneNdpEntriesGet) GetCrcString() string   { return "4d418cf4" }
func (*OneNdpEntriesGet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneNdpEntriesGet) GetRetVal() error {
	return nil
}

func (m *OneNdpEntriesGet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Bd
	return size
}
func (m *OneNdpEntriesGet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Bd)
	return buf.Bytes(), nil
}
func (m *OneNdpEntriesGet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Bd = buf.DecodeUint32()
	return nil
}

// OneNdpEntriesGetReply defines message 'one_ndp_entries_get_reply'.
type OneNdpEntriesGetReply struct {
	Retval  int32         `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count   uint32        `binapi:"u32,name=count" json:"-"`
	Entries []OneNdpEntry `binapi:"one_ndp_entry[count],name=entries" json:"entries,omitempty"`
}

func (m *OneNdpEntriesGetReply) Reset()               { *m = OneNdpEntriesGetReply{} }
func (*OneNdpEntriesGetReply) GetMessageName() string { return "one_ndp_entries_get_reply" }
func (*OneNdpEntriesGetReply) GetCrcString() string   { return "d0822f37" }
func (*OneNdpEntriesGetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneNdpEntriesGetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneNdpEntriesGetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Entries); j1++ {
		var s1 OneNdpEntry
		_ = s1
		if j1 < len(m.Entries) {
			s1 = m.Entries[j1]
		}
		size += 1 * 6  // s1.Mac
		size += 1 * 16 // s1.IP6
	}
	return size
}
func (m *OneNdpEntriesGetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.Entries)))
	for j0 := 0; j0 < len(m.Entries); j0++ {
		var v0 OneNdpEntry // Entries
		if j0 < len(m.Entries) {
			v0 = m.Entries[j0]
		}
		buf.EncodeBytes(v0.Mac, 6)
		buf.EncodeBytes(v0.IP6, 16)
	}
	return buf.Bytes(), nil
}
func (m *OneNdpEntriesGetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.Entries = make([]OneNdpEntry, m.Count)
	for j0 := 0; j0 < len(m.Entries); j0++ {
		m.Entries[j0].Mac = make([]byte, 6)
		copy(m.Entries[j0].Mac, buf.DecodeBytes(len(m.Entries[j0].Mac)))
		m.Entries[j0].IP6 = make([]byte, 16)
		copy(m.Entries[j0].IP6, buf.DecodeBytes(len(m.Entries[j0].IP6)))
	}
	return nil
}

// OneNshSetLocatorSet defines message 'one_nsh_set_locator_set'.
type OneNshSetLocatorSet struct {
	IsAdd  uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LsName []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
}

func (m *OneNshSetLocatorSet) Reset()               { *m = OneNshSetLocatorSet{} }
func (*OneNshSetLocatorSet) GetMessageName() string { return "one_nsh_set_locator_set" }
func (*OneNshSetLocatorSet) GetCrcString() string   { return "7aa022dd" }
func (*OneNshSetLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneNshSetLocatorSet) GetRetVal() error {
	return nil
}

func (m *OneNshSetLocatorSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LsName
	return size
}
func (m *OneNshSetLocatorSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LsName, 64)
	return buf.Bytes(), nil
}
func (m *OneNshSetLocatorSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	return nil
}

// OneNshSetLocatorSetReply defines message 'one_nsh_set_locator_set_reply'.
type OneNshSetLocatorSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneNshSetLocatorSetReply) Reset()               { *m = OneNshSetLocatorSetReply{} }
func (*OneNshSetLocatorSetReply) GetMessageName() string { return "one_nsh_set_locator_set_reply" }
func (*OneNshSetLocatorSetReply) GetCrcString() string   { return "e8d4e804" }
func (*OneNshSetLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneNshSetLocatorSetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneNshSetLocatorSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneNshSetLocatorSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneNshSetLocatorSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OnePitrSetLocatorSet defines message 'one_pitr_set_locator_set'.
type OnePitrSetLocatorSet struct {
	IsAdd  uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
	LsName []byte `binapi:"u8[64],name=ls_name" json:"ls_name,omitempty"`
}

func (m *OnePitrSetLocatorSet) Reset()               { *m = OnePitrSetLocatorSet{} }
func (*OnePitrSetLocatorSet) GetMessageName() string { return "one_pitr_set_locator_set" }
func (*OnePitrSetLocatorSet) GetCrcString() string   { return "7aa022dd" }
func (*OnePitrSetLocatorSet) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OnePitrSetLocatorSet) GetRetVal() error {
	return nil
}

func (m *OnePitrSetLocatorSet) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsAdd
	size += 1 * 64 // m.LsName
	return size
}
func (m *OnePitrSetLocatorSet) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsAdd)
	buf.EncodeBytes(m.LsName, 64)
	return buf.Bytes(), nil
}
func (m *OnePitrSetLocatorSet) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsAdd = buf.DecodeUint8()
	m.LsName = make([]byte, 64)
	copy(m.LsName, buf.DecodeBytes(len(m.LsName)))
	return nil
}

// OnePitrSetLocatorSetReply defines message 'one_pitr_set_locator_set_reply'.
type OnePitrSetLocatorSetReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OnePitrSetLocatorSetReply) Reset()               { *m = OnePitrSetLocatorSetReply{} }
func (*OnePitrSetLocatorSetReply) GetMessageName() string { return "one_pitr_set_locator_set_reply" }
func (*OnePitrSetLocatorSetReply) GetCrcString() string   { return "e8d4e804" }
func (*OnePitrSetLocatorSetReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OnePitrSetLocatorSetReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OnePitrSetLocatorSetReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OnePitrSetLocatorSetReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OnePitrSetLocatorSetReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneRlocProbeEnableDisable defines message 'one_rloc_probe_enable_disable'.
type OneRlocProbeEnableDisable struct {
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *OneRlocProbeEnableDisable) Reset()               { *m = OneRlocProbeEnableDisable{} }
func (*OneRlocProbeEnableDisable) GetMessageName() string { return "one_rloc_probe_enable_disable" }
func (*OneRlocProbeEnableDisable) GetCrcString() string   { return "294103d1" }
func (*OneRlocProbeEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneRlocProbeEnableDisable) GetRetVal() error {
	return nil
}

func (m *OneRlocProbeEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEnabled
	return size
}
func (m *OneRlocProbeEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *OneRlocProbeEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// OneRlocProbeEnableDisableReply defines message 'one_rloc_probe_enable_disable_reply'.
type OneRlocProbeEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneRlocProbeEnableDisableReply) Reset() { *m = OneRlocProbeEnableDisableReply{} }
func (*OneRlocProbeEnableDisableReply) GetMessageName() string {
	return "one_rloc_probe_enable_disable_reply"
}
func (*OneRlocProbeEnableDisableReply) GetCrcString() string { return "e8d4e804" }
func (*OneRlocProbeEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneRlocProbeEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneRlocProbeEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneRlocProbeEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneRlocProbeEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneSetTransportProtocol defines message 'one_set_transport_protocol'.
type OneSetTransportProtocol struct {
	Protocol uint8 `binapi:"u8,name=protocol" json:"protocol,omitempty"`
}

func (m *OneSetTransportProtocol) Reset()               { *m = OneSetTransportProtocol{} }
func (*OneSetTransportProtocol) GetMessageName() string { return "one_set_transport_protocol" }
func (*OneSetTransportProtocol) GetCrcString() string   { return "07b6b85f" }
func (*OneSetTransportProtocol) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneSetTransportProtocol) GetRetVal() error {
	return nil
}

func (m *OneSetTransportProtocol) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.Protocol
	return size
}
func (m *OneSetTransportProtocol) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.Protocol)
	return buf.Bytes(), nil
}
func (m *OneSetTransportProtocol) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Protocol = buf.DecodeUint8()
	return nil
}

// OneSetTransportProtocolReply defines message 'one_set_transport_protocol_reply'.
type OneSetTransportProtocolReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneSetTransportProtocolReply) Reset() { *m = OneSetTransportProtocolReply{} }
func (*OneSetTransportProtocolReply) GetMessageName() string {
	return "one_set_transport_protocol_reply"
}
func (*OneSetTransportProtocolReply) GetCrcString() string { return "e8d4e804" }
func (*OneSetTransportProtocolReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneSetTransportProtocolReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneSetTransportProtocolReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneSetTransportProtocolReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneSetTransportProtocolReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneShowPetrMode defines message 'one_show_petr_mode'.
type OneShowPetrMode struct{}

func (m *OneShowPetrMode) Reset()               { *m = OneShowPetrMode{} }
func (*OneShowPetrMode) GetMessageName() string { return "one_show_petr_mode" }
func (*OneShowPetrMode) GetCrcString() string   { return "51077d14" }
func (*OneShowPetrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneShowPetrMode) GetRetVal() error {
	return nil
}

func (m *OneShowPetrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneShowPetrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneShowPetrMode) Unmarshal(b []byte) error {
	return nil
}

// OneShowPetrModeReply defines message 'one_show_petr_mode_reply'.
type OneShowPetrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEn   uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneShowPetrModeReply) Reset()               { *m = OneShowPetrModeReply{} }
func (*OneShowPetrModeReply) GetMessageName() string { return "one_show_petr_mode_reply" }
func (*OneShowPetrModeReply) GetCrcString() string   { return "6b4c29dc" }
func (*OneShowPetrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneShowPetrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneShowPetrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEn
	return size
}
func (m *OneShowPetrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneShowPetrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneShowPitrMode defines message 'one_show_pitr_mode'.
type OneShowPitrMode struct{}

func (m *OneShowPitrMode) Reset()               { *m = OneShowPitrMode{} }
func (*OneShowPitrMode) GetMessageName() string { return "one_show_pitr_mode" }
func (*OneShowPitrMode) GetCrcString() string   { return "51077d14" }
func (*OneShowPitrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneShowPitrMode) GetRetVal() error {
	return nil
}

func (m *OneShowPitrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneShowPitrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneShowPitrMode) Unmarshal(b []byte) error {
	return nil
}

// OneShowPitrModeReply defines message 'one_show_pitr_mode_reply'.
type OneShowPitrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEn   uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneShowPitrModeReply) Reset()               { *m = OneShowPitrModeReply{} }
func (*OneShowPitrModeReply) GetMessageName() string { return "one_show_pitr_mode_reply" }
func (*OneShowPitrModeReply) GetCrcString() string   { return "6b4c29dc" }
func (*OneShowPitrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneShowPitrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneShowPitrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEn
	return size
}
func (m *OneShowPitrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneShowPitrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneShowXtrMode defines message 'one_show_xtr_mode'.
type OneShowXtrMode struct{}

func (m *OneShowXtrMode) Reset()               { *m = OneShowXtrMode{} }
func (*OneShowXtrMode) GetMessageName() string { return "one_show_xtr_mode" }
func (*OneShowXtrMode) GetCrcString() string   { return "51077d14" }
func (*OneShowXtrMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneShowXtrMode) GetRetVal() error {
	return nil
}

func (m *OneShowXtrMode) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneShowXtrMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneShowXtrMode) Unmarshal(b []byte) error {
	return nil
}

// OneShowXtrModeReply defines message 'one_show_xtr_mode_reply'.
type OneShowXtrModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEn   uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneShowXtrModeReply) Reset()               { *m = OneShowXtrModeReply{} }
func (*OneShowXtrModeReply) GetMessageName() string { return "one_show_xtr_mode_reply" }
func (*OneShowXtrModeReply) GetCrcString() string   { return "6b4c29dc" }
func (*OneShowXtrModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneShowXtrModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneShowXtrModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEn
	return size
}
func (m *OneShowXtrModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneShowXtrModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneStatsDetails defines message 'one_stats_details'.
type OneStatsDetails struct {
	Vni         uint32 `binapi:"u32,name=vni" json:"vni,omitempty"`
	EidType     uint8  `binapi:"u8,name=eid_type" json:"eid_type,omitempty"`
	Deid        []byte `binapi:"u8[16],name=deid" json:"deid,omitempty"`
	Seid        []byte `binapi:"u8[16],name=seid" json:"seid,omitempty"`
	DeidPrefLen uint8  `binapi:"u8,name=deid_pref_len" json:"deid_pref_len,omitempty"`
	SeidPrefLen uint8  `binapi:"u8,name=seid_pref_len" json:"seid_pref_len,omitempty"`
	IsIP4       uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Rloc        []byte `binapi:"u8[16],name=rloc" json:"rloc,omitempty"`
	Lloc        []byte `binapi:"u8[16],name=lloc" json:"lloc,omitempty"`
	PktCount    uint32 `binapi:"u32,name=pkt_count" json:"pkt_count,omitempty"`
	Bytes       uint32 `binapi:"u32,name=bytes" json:"bytes,omitempty"`
}

func (m *OneStatsDetails) Reset()               { *m = OneStatsDetails{} }
func (*OneStatsDetails) GetMessageName() string { return "one_stats_details" }
func (*OneStatsDetails) GetCrcString() string   { return "e1a34a05" }
func (*OneStatsDetails) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneStatsDetails) GetRetVal() error {
	return nil
}

func (m *OneStatsDetails) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Vni
	size += 1      // m.EidType
	size += 1 * 16 // m.Deid
	size += 1 * 16 // m.Seid
	size += 1      // m.DeidPrefLen
	size += 1      // m.SeidPrefLen
	size += 1      // m.IsIP4
	size += 1 * 16 // m.Rloc
	size += 1 * 16 // m.Lloc
	size += 4      // m.PktCount
	size += 4      // m.Bytes
	return size
}
func (m *OneStatsDetails) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.Vni)
	buf.EncodeUint8(m.EidType)
	buf.EncodeBytes(m.Deid, 16)
	buf.EncodeBytes(m.Seid, 16)
	buf.EncodeUint8(m.DeidPrefLen)
	buf.EncodeUint8(m.SeidPrefLen)
	buf.EncodeUint8(m.IsIP4)
	buf.EncodeBytes(m.Rloc, 16)
	buf.EncodeBytes(m.Lloc, 16)
	buf.EncodeUint32(m.PktCount)
	buf.EncodeUint32(m.Bytes)
	return buf.Bytes(), nil
}
func (m *OneStatsDetails) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Vni = buf.DecodeUint32()
	m.EidType = buf.DecodeUint8()
	m.Deid = make([]byte, 16)
	copy(m.Deid, buf.DecodeBytes(len(m.Deid)))
	m.Seid = make([]byte, 16)
	copy(m.Seid, buf.DecodeBytes(len(m.Seid)))
	m.DeidPrefLen = buf.DecodeUint8()
	m.SeidPrefLen = buf.DecodeUint8()
	m.IsIP4 = buf.DecodeUint8()
	m.Rloc = make([]byte, 16)
	copy(m.Rloc, buf.DecodeBytes(len(m.Rloc)))
	m.Lloc = make([]byte, 16)
	copy(m.Lloc, buf.DecodeBytes(len(m.Lloc)))
	m.PktCount = buf.DecodeUint32()
	m.Bytes = buf.DecodeUint32()
	return nil
}

// OneStatsDump defines message 'one_stats_dump'.
type OneStatsDump struct{}

func (m *OneStatsDump) Reset()               { *m = OneStatsDump{} }
func (*OneStatsDump) GetMessageName() string { return "one_stats_dump" }
func (*OneStatsDump) GetCrcString() string   { return "51077d14" }
func (*OneStatsDump) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneStatsDump) GetRetVal() error {
	return nil
}

func (m *OneStatsDump) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneStatsDump) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneStatsDump) Unmarshal(b []byte) error {
	return nil
}

// OneStatsEnableDisable defines message 'one_stats_enable_disable'.
type OneStatsEnableDisable struct {
	IsEn uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *OneStatsEnableDisable) Reset()               { *m = OneStatsEnableDisable{} }
func (*OneStatsEnableDisable) GetMessageName() string { return "one_stats_enable_disable" }
func (*OneStatsEnableDisable) GetCrcString() string   { return "eb0e943b" }
func (*OneStatsEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneStatsEnableDisable) GetRetVal() error {
	return nil
}

func (m *OneStatsEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.IsEn
	return size
}
func (m *OneStatsEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *OneStatsEnableDisable) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsEn = buf.DecodeUint8()
	return nil
}

// OneStatsEnableDisableReply defines message 'one_stats_enable_disable_reply'.
type OneStatsEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneStatsEnableDisableReply) Reset()               { *m = OneStatsEnableDisableReply{} }
func (*OneStatsEnableDisableReply) GetMessageName() string { return "one_stats_enable_disable_reply" }
func (*OneStatsEnableDisableReply) GetCrcString() string   { return "e8d4e804" }
func (*OneStatsEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneStatsEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneStatsEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneStatsEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneStatsEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneStatsFlush defines message 'one_stats_flush'.
type OneStatsFlush struct{}

func (m *OneStatsFlush) Reset()               { *m = OneStatsFlush{} }
func (*OneStatsFlush) GetMessageName() string { return "one_stats_flush" }
func (*OneStatsFlush) GetCrcString() string   { return "51077d14" }
func (*OneStatsFlush) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneStatsFlush) GetRetVal() error {
	return nil
}

func (m *OneStatsFlush) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *OneStatsFlush) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *OneStatsFlush) Unmarshal(b []byte) error {
	return nil
}

// OneStatsFlushReply defines message 'one_stats_flush_reply'.
type OneStatsFlushReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneStatsFlushReply) Reset()               { *m = OneStatsFlushReply{} }
func (*OneStatsFlushReply) GetMessageName() string { return "one_stats_flush_reply" }
func (*OneStatsFlushReply) GetCrcString() string   { return "e8d4e804" }
func (*OneStatsFlushReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneStatsFlushReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneStatsFlushReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneStatsFlushReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneStatsFlushReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// OneUsePetr defines message 'one_use_petr'.
type OneUsePetr struct {
	IsIP4   uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Address []byte `binapi:"u8[16],name=address" json:"address,omitempty"`
	IsAdd   uint8  `binapi:"u8,name=is_add" json:"is_add,omitempty"`
}

func (m *OneUsePetr) Reset()               { *m = OneUsePetr{} }
func (*OneUsePetr) GetMessageName() string { return "one_use_petr" }
func (*OneUsePetr) GetCrcString() string   { return "6910787d" }
func (*OneUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *OneUsePetr) GetRetVal() error {
	return nil
}

func (m *OneUsePetr) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1      // m.IsIP4
	size += 1 * 16 // m.Address
	size += 1      // m.IsAdd
	return size
}
func (m *OneUsePetr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint8(m.IsIP4)
	buf.EncodeBytes(m.Address, 16)
	buf.EncodeUint8(m.IsAdd)
	return buf.Bytes(), nil
}
func (m *OneUsePetr) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.IsIP4 = buf.DecodeUint8()
	m.Address = make([]byte, 16)
	copy(m.Address, buf.DecodeBytes(len(m.Address)))
	m.IsAdd = buf.DecodeUint8()
	return nil
}

// OneUsePetrReply defines message 'one_use_petr_reply'.
type OneUsePetrReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *OneUsePetrReply) Reset()               { *m = OneUsePetrReply{} }
func (*OneUsePetrReply) GetMessageName() string { return "one_use_petr_reply" }
func (*OneUsePetrReply) GetCrcString() string   { return "e8d4e804" }
func (*OneUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *OneUsePetrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *OneUsePetrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *OneUsePetrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *OneUsePetrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// ShowOneMapRegisterFallbackThreshold defines message 'show_one_map_register_fallback_threshold'.
type ShowOneMapRegisterFallbackThreshold struct{}

func (m *ShowOneMapRegisterFallbackThreshold) Reset() { *m = ShowOneMapRegisterFallbackThreshold{} }
func (*ShowOneMapRegisterFallbackThreshold) GetMessageName() string {
	return "show_one_map_register_fallback_threshold"
}
func (*ShowOneMapRegisterFallbackThreshold) GetCrcString() string { return "51077d14" }
func (*ShowOneMapRegisterFallbackThreshold) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneMapRegisterFallbackThreshold) GetRetVal() error {
	return nil
}

func (m *ShowOneMapRegisterFallbackThreshold) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneMapRegisterFallbackThreshold) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterFallbackThreshold) Unmarshal(b []byte) error {
	return nil
}

// ShowOneMapRegisterFallbackThresholdReply defines message 'show_one_map_register_fallback_threshold_reply'.
type ShowOneMapRegisterFallbackThresholdReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Value  uint32 `binapi:"u32,name=value" json:"value,omitempty"`
}

func (m *ShowOneMapRegisterFallbackThresholdReply) Reset() {
	*m = ShowOneMapRegisterFallbackThresholdReply{}
}
func (*ShowOneMapRegisterFallbackThresholdReply) GetMessageName() string {
	return "show_one_map_register_fallback_threshold_reply"
}
func (*ShowOneMapRegisterFallbackThresholdReply) GetCrcString() string { return "c93a9113" }
func (*ShowOneMapRegisterFallbackThresholdReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneMapRegisterFallbackThresholdReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneMapRegisterFallbackThresholdReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.Value
	return size
}
func (m *ShowOneMapRegisterFallbackThresholdReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.Value)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterFallbackThresholdReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Value = buf.DecodeUint32()
	return nil
}

// ShowOneMapRegisterState defines message 'show_one_map_register_state'.
type ShowOneMapRegisterState struct{}

func (m *ShowOneMapRegisterState) Reset()               { *m = ShowOneMapRegisterState{} }
func (*ShowOneMapRegisterState) GetMessageName() string { return "show_one_map_register_state" }
func (*ShowOneMapRegisterState) GetCrcString() string   { return "51077d14" }
func (*ShowOneMapRegisterState) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneMapRegisterState) GetRetVal() error {
	return nil
}

func (m *ShowOneMapRegisterState) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneMapRegisterState) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterState) Unmarshal(b []byte) error {
	return nil
}

// ShowOneMapRegisterStateReply defines message 'show_one_map_register_state_reply'.
type ShowOneMapRegisterStateReply struct {
	Retval    int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *ShowOneMapRegisterStateReply) Reset() { *m = ShowOneMapRegisterStateReply{} }
func (*ShowOneMapRegisterStateReply) GetMessageName() string {
	return "show_one_map_register_state_reply"
}
func (*ShowOneMapRegisterStateReply) GetCrcString() string { return "14304fbc" }
func (*ShowOneMapRegisterStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneMapRegisterStateReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneMapRegisterStateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEnabled
	return size
}
func (m *ShowOneMapRegisterStateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterStateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// ShowOneMapRegisterTTL defines message 'show_one_map_register_ttl'.
type ShowOneMapRegisterTTL struct{}

func (m *ShowOneMapRegisterTTL) Reset()               { *m = ShowOneMapRegisterTTL{} }
func (*ShowOneMapRegisterTTL) GetMessageName() string { return "show_one_map_register_ttl" }
func (*ShowOneMapRegisterTTL) GetCrcString() string   { return "51077d14" }
func (*ShowOneMapRegisterTTL) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneMapRegisterTTL) GetRetVal() error {
	return nil
}

func (m *ShowOneMapRegisterTTL) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneMapRegisterTTL) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterTTL) Unmarshal(b []byte) error {
	return nil
}

// ShowOneMapRegisterTTLReply defines message 'show_one_map_register_ttl_reply'.
type ShowOneMapRegisterTTLReply struct {
	Retval int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	TTL    uint32 `binapi:"u32,name=ttl" json:"ttl,omitempty"`
}

func (m *ShowOneMapRegisterTTLReply) Reset()               { *m = ShowOneMapRegisterTTLReply{} }
func (*ShowOneMapRegisterTTLReply) GetMessageName() string { return "show_one_map_register_ttl_reply" }
func (*ShowOneMapRegisterTTLReply) GetCrcString() string   { return "fa83dd66" }
func (*ShowOneMapRegisterTTLReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneMapRegisterTTLReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneMapRegisterTTLReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 4 // m.TTL
	return size
}
func (m *ShowOneMapRegisterTTLReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(m.TTL)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRegisterTTLReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.TTL = buf.DecodeUint32()
	return nil
}

// ShowOneMapRequestMode defines message 'show_one_map_request_mode'.
type ShowOneMapRequestMode struct{}

func (m *ShowOneMapRequestMode) Reset()               { *m = ShowOneMapRequestMode{} }
func (*ShowOneMapRequestMode) GetMessageName() string { return "show_one_map_request_mode" }
func (*ShowOneMapRequestMode) GetCrcString() string   { return "51077d14" }
func (*ShowOneMapRequestMode) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneMapRequestMode) GetRetVal() error {
	return nil
}

func (m *ShowOneMapRequestMode) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneMapRequestMode) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRequestMode) Unmarshal(b []byte) error {
	return nil
}

// ShowOneMapRequestModeReply defines message 'show_one_map_request_mode_reply'.
type ShowOneMapRequestModeReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	Mode   uint8 `binapi:"u8,name=mode" json:"mode,omitempty"`
}

func (m *ShowOneMapRequestModeReply) Reset()               { *m = ShowOneMapRequestModeReply{} }
func (*ShowOneMapRequestModeReply) GetMessageName() string { return "show_one_map_request_mode_reply" }
func (*ShowOneMapRequestModeReply) GetCrcString() string   { return "d423107c" }
func (*ShowOneMapRequestModeReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneMapRequestModeReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneMapRequestModeReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.Mode
	return size
}
func (m *ShowOneMapRequestModeReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Mode)
	return buf.Bytes(), nil
}
func (m *ShowOneMapRequestModeReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Mode = buf.DecodeUint8()
	return nil
}

// ShowOneNshMapping defines message 'show_one_nsh_mapping'.
type ShowOneNshMapping struct{}

func (m *ShowOneNshMapping) Reset()               { *m = ShowOneNshMapping{} }
func (*ShowOneNshMapping) GetMessageName() string { return "show_one_nsh_mapping" }
func (*ShowOneNshMapping) GetCrcString() string   { return "51077d14" }
func (*ShowOneNshMapping) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneNshMapping) GetRetVal() error {
	return nil
}

func (m *ShowOneNshMapping) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneNshMapping) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneNshMapping) Unmarshal(b []byte) error {
	return nil
}

// ShowOneNshMappingReply defines message 'show_one_nsh_mapping_reply'.
type ShowOneNshMappingReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsSet          uint8  `binapi:"u8,name=is_set" json:"is_set,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *ShowOneNshMappingReply) Reset()               { *m = ShowOneNshMappingReply{} }
func (*ShowOneNshMappingReply) GetMessageName() string { return "show_one_nsh_mapping_reply" }
func (*ShowOneNshMappingReply) GetCrcString() string   { return "f2ff364e" }
func (*ShowOneNshMappingReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneNshMappingReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneNshMappingReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1      // m.IsSet
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *ShowOneNshMappingReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsSet)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *ShowOneNshMappingReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsSet = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// ShowOnePitr defines message 'show_one_pitr'.
type ShowOnePitr struct{}

func (m *ShowOnePitr) Reset()               { *m = ShowOnePitr{} }
func (*ShowOnePitr) GetMessageName() string { return "show_one_pitr" }
func (*ShowOnePitr) GetCrcString() string   { return "51077d14" }
func (*ShowOnePitr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOnePitr) GetRetVal() error {
	return nil
}

func (m *ShowOnePitr) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOnePitr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOnePitr) Unmarshal(b []byte) error {
	return nil
}

// ShowOnePitrReply defines message 'show_one_pitr_reply'.
type ShowOnePitrReply struct {
	Retval         int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Status         uint8  `binapi:"u8,name=status" json:"status,omitempty"`
	LocatorSetName []byte `binapi:"u8[64],name=locator_set_name" json:"locator_set_name,omitempty"`
}

func (m *ShowOnePitrReply) Reset()               { *m = ShowOnePitrReply{} }
func (*ShowOnePitrReply) GetMessageName() string { return "show_one_pitr_reply" }
func (*ShowOnePitrReply) GetCrcString() string   { return "dca512cc" }
func (*ShowOnePitrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOnePitrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOnePitrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1      // m.Status
	size += 1 * 64 // m.LocatorSetName
	return size
}
func (m *ShowOnePitrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Status)
	buf.EncodeBytes(m.LocatorSetName, 64)
	return buf.Bytes(), nil
}
func (m *ShowOnePitrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Status = buf.DecodeUint8()
	m.LocatorSetName = make([]byte, 64)
	copy(m.LocatorSetName, buf.DecodeBytes(len(m.LocatorSetName)))
	return nil
}

// ShowOneRlocProbeState defines message 'show_one_rloc_probe_state'.
type ShowOneRlocProbeState struct{}

func (m *ShowOneRlocProbeState) Reset()               { *m = ShowOneRlocProbeState{} }
func (*ShowOneRlocProbeState) GetMessageName() string { return "show_one_rloc_probe_state" }
func (*ShowOneRlocProbeState) GetCrcString() string   { return "51077d14" }
func (*ShowOneRlocProbeState) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneRlocProbeState) GetRetVal() error {
	return nil
}

func (m *ShowOneRlocProbeState) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneRlocProbeState) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneRlocProbeState) Unmarshal(b []byte) error {
	return nil
}

// ShowOneRlocProbeStateReply defines message 'show_one_rloc_probe_state_reply'.
type ShowOneRlocProbeStateReply struct {
	Retval    int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEnabled uint8 `binapi:"u8,name=is_enabled" json:"is_enabled,omitempty"`
}

func (m *ShowOneRlocProbeStateReply) Reset()               { *m = ShowOneRlocProbeStateReply{} }
func (*ShowOneRlocProbeStateReply) GetMessageName() string { return "show_one_rloc_probe_state_reply" }
func (*ShowOneRlocProbeStateReply) GetCrcString() string   { return "14304fbc" }
func (*ShowOneRlocProbeStateReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneRlocProbeStateReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneRlocProbeStateReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEnabled
	return size
}
func (m *ShowOneRlocProbeStateReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEnabled)
	return buf.Bytes(), nil
}
func (m *ShowOneRlocProbeStateReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEnabled = buf.DecodeUint8()
	return nil
}

// ShowOneStatsEnableDisable defines message 'show_one_stats_enable_disable'.
type ShowOneStatsEnableDisable struct{}

func (m *ShowOneStatsEnableDisable) Reset()               { *m = ShowOneStatsEnableDisable{} }
func (*ShowOneStatsEnableDisable) GetMessageName() string { return "show_one_stats_enable_disable" }
func (*ShowOneStatsEnableDisable) GetCrcString() string   { return "51077d14" }
func (*ShowOneStatsEnableDisable) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneStatsEnableDisable) GetRetVal() error {
	return nil
}

func (m *ShowOneStatsEnableDisable) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneStatsEnableDisable) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneStatsEnableDisable) Unmarshal(b []byte) error {
	return nil
}

// ShowOneStatsEnableDisableReply defines message 'show_one_stats_enable_disable_reply'.
type ShowOneStatsEnableDisableReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	IsEn   uint8 `binapi:"u8,name=is_en" json:"is_en,omitempty"`
}

func (m *ShowOneStatsEnableDisableReply) Reset() { *m = ShowOneStatsEnableDisableReply{} }
func (*ShowOneStatsEnableDisableReply) GetMessageName() string {
	return "show_one_stats_enable_disable_reply"
}
func (*ShowOneStatsEnableDisableReply) GetCrcString() string { return "6b4c29dc" }
func (*ShowOneStatsEnableDisableReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneStatsEnableDisableReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneStatsEnableDisableReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.IsEn
	return size
}
func (m *ShowOneStatsEnableDisableReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.IsEn)
	return buf.Bytes(), nil
}
func (m *ShowOneStatsEnableDisableReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.IsEn = buf.DecodeUint8()
	return nil
}

// ShowOneStatus defines message 'show_one_status'.
type ShowOneStatus struct{}

func (m *ShowOneStatus) Reset()               { *m = ShowOneStatus{} }
func (*ShowOneStatus) GetMessageName() string { return "show_one_status" }
func (*ShowOneStatus) GetCrcString() string   { return "51077d14" }
func (*ShowOneStatus) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneStatus) GetRetVal() error {
	return nil
}

func (m *ShowOneStatus) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneStatus) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneStatus) Unmarshal(b []byte) error {
	return nil
}

// ShowOneStatusReply defines message 'show_one_status_reply'.
type ShowOneStatusReply struct {
	Retval        int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
	FeatureStatus uint8 `binapi:"u8,name=feature_status" json:"feature_status,omitempty"`
	GpeStatus     uint8 `binapi:"u8,name=gpe_status" json:"gpe_status,omitempty"`
}

func (m *ShowOneStatusReply) Reset()               { *m = ShowOneStatusReply{} }
func (*ShowOneStatusReply) GetMessageName() string { return "show_one_status_reply" }
func (*ShowOneStatusReply) GetCrcString() string   { return "ddcf48ef" }
func (*ShowOneStatusReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneStatusReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneStatusReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	size += 1 // m.FeatureStatus
	size += 1 // m.GpeStatus
	return size
}
func (m *ShowOneStatusReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.FeatureStatus)
	buf.EncodeUint8(m.GpeStatus)
	return buf.Bytes(), nil
}
func (m *ShowOneStatusReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.FeatureStatus = buf.DecodeUint8()
	m.GpeStatus = buf.DecodeUint8()
	return nil
}

// ShowOneUsePetr defines message 'show_one_use_petr'.
type ShowOneUsePetr struct{}

func (m *ShowOneUsePetr) Reset()               { *m = ShowOneUsePetr{} }
func (*ShowOneUsePetr) GetMessageName() string { return "show_one_use_petr" }
func (*ShowOneUsePetr) GetCrcString() string   { return "51077d14" }
func (*ShowOneUsePetr) GetMessageType() api.MessageType {
	return api.RequestMessage
}
func (m *ShowOneUsePetr) GetRetVal() error {
	return nil
}

func (m *ShowOneUsePetr) Size() (size int) {
	if m == nil {
		return 0
	}
	return size
}
func (m *ShowOneUsePetr) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	return buf.Bytes(), nil
}
func (m *ShowOneUsePetr) Unmarshal(b []byte) error {
	return nil
}

// ShowOneUsePetrReply defines message 'show_one_use_petr_reply'.
type ShowOneUsePetrReply struct {
	Retval  int32  `binapi:"i32,name=retval" json:"retval,omitempty"`
	Status  uint8  `binapi:"u8,name=status" json:"status,omitempty"`
	IsIP4   uint8  `binapi:"u8,name=is_ip4" json:"is_ip4,omitempty"`
	Address []byte `binapi:"u8[16],name=address" json:"address,omitempty"`
}

func (m *ShowOneUsePetrReply) Reset()               { *m = ShowOneUsePetrReply{} }
func (*ShowOneUsePetrReply) GetMessageName() string { return "show_one_use_petr_reply" }
func (*ShowOneUsePetrReply) GetCrcString() string   { return "1eb21916" }
func (*ShowOneUsePetrReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}
func (m *ShowOneUsePetrReply) GetRetVal() error {
	return api.RetvalToVPPApiError(int32(m.Retval))
}

func (m *ShowOneUsePetrReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4      // m.Retval
	size += 1      // m.Status
	size += 1      // m.IsIP4
	size += 1 * 16 // m.Address
	return size
}
func (m *ShowOneUsePetrReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint8(m.Status)
	buf.EncodeUint8(m.IsIP4)
	buf.EncodeBytes(m.Address, 16)
	return buf.Bytes(), nil
}
func (m *ShowOneUsePetrReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Status = buf.DecodeUint8()
	m.IsIP4 = buf.DecodeUint8()
	m.Address = make([]byte, 16)
	copy(m.Address, buf.DecodeBytes(len(m.Address)))
	return nil
}

func init() { file_one_binapi_init() }
func file_one_binapi_init() {
	api.RegisterMessage((*OneAddDelAdjacency)(nil), "one_add_del_adjacency_f047390d")
	api.RegisterMessage((*OneAddDelAdjacencyReply)(nil), "one_add_del_adjacency_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelL2ArpEntry)(nil), "one_add_del_l2_arp_entry_a95cc2d7")
	api.RegisterMessage((*OneAddDelL2ArpEntryReply)(nil), "one_add_del_l2_arp_entry_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelLocalEid)(nil), "one_add_del_local_eid_e6d00717")
	api.RegisterMessage((*OneAddDelLocalEidReply)(nil), "one_add_del_local_eid_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelLocator)(nil), "one_add_del_locator_006a4240")
	api.RegisterMessage((*OneAddDelLocatorReply)(nil), "one_add_del_locator_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelLocatorSet)(nil), "one_add_del_locator_set_2e73b050")
	api.RegisterMessage((*OneAddDelLocatorSetReply)(nil), "one_add_del_locator_set_reply_b6666db4")
	api.RegisterMessage((*OneAddDelMapRequestItrRlocs)(nil), "one_add_del_map_request_itr_rlocs_c7c6cb2f")
	api.RegisterMessage((*OneAddDelMapRequestItrRlocsReply)(nil), "one_add_del_map_request_itr_rlocs_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelMapResolver)(nil), "one_add_del_map_resolver_0ebcd37d")
	api.RegisterMessage((*OneAddDelMapResolverReply)(nil), "one_add_del_map_resolver_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelMapServer)(nil), "one_add_del_map_server_0ebcd37d")
	api.RegisterMessage((*OneAddDelMapServerReply)(nil), "one_add_del_map_server_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelNdpEntry)(nil), "one_add_del_ndp_entry_e9468fe3")
	api.RegisterMessage((*OneAddDelNdpEntryReply)(nil), "one_add_del_ndp_entry_reply_e8d4e804")
	api.RegisterMessage((*OneAddDelRemoteMapping)(nil), "one_add_del_remote_mapping_0b2010ec")
	api.RegisterMessage((*OneAddDelRemoteMappingReply)(nil), "one_add_del_remote_mapping_reply_e8d4e804")
	api.RegisterMessage((*OneAdjacenciesGet)(nil), "one_adjacencies_get_8d1f2fe9")
	api.RegisterMessage((*OneAdjacenciesGetReply)(nil), "one_adjacencies_get_reply_60a3c592")
	api.RegisterMessage((*OneEidTableAddDelMap)(nil), "one_eid_table_add_del_map_59e9975e")
	api.RegisterMessage((*OneEidTableAddDelMapReply)(nil), "one_eid_table_add_del_map_reply_e8d4e804")
	api.RegisterMessage((*OneEidTableDetails)(nil), "one_eid_table_details_dcd9f414")
	api.RegisterMessage((*OneEidTableDump)(nil), "one_eid_table_dump_e0df64da")
	api.RegisterMessage((*OneEidTableMapDetails)(nil), "one_eid_table_map_details_0b6859e2")
	api.RegisterMessage((*OneEidTableMapDump)(nil), "one_eid_table_map_dump_67c54650")
	api.RegisterMessage((*OneEidTableVniDetails)(nil), "one_eid_table_vni_details_64abc01e")
	api.RegisterMessage((*OneEidTableVniDump)(nil), "one_eid_table_vni_dump_51077d14")
	api.RegisterMessage((*OneEnableDisable)(nil), "one_enable_disable_eb0e943b")
	api.RegisterMessage((*OneEnableDisablePetrMode)(nil), "one_enable_disable_petr_mode_eb0e943b")
	api.RegisterMessage((*OneEnableDisablePetrModeReply)(nil), "one_enable_disable_petr_mode_reply_e8d4e804")
	api.RegisterMessage((*OneEnableDisablePitrMode)(nil), "one_enable_disable_pitr_mode_eb0e943b")
	api.RegisterMessage((*OneEnableDisablePitrModeReply)(nil), "one_enable_disable_pitr_mode_reply_e8d4e804")
	api.RegisterMessage((*OneEnableDisableReply)(nil), "one_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*OneEnableDisableXtrMode)(nil), "one_enable_disable_xtr_mode_eb0e943b")
	api.RegisterMessage((*OneEnableDisableXtrModeReply)(nil), "one_enable_disable_xtr_mode_reply_e8d4e804")
	api.RegisterMessage((*OneGetMapRequestItrRlocs)(nil), "one_get_map_request_itr_rlocs_51077d14")
	api.RegisterMessage((*OneGetMapRequestItrRlocsReply)(nil), "one_get_map_request_itr_rlocs_reply_9f56f6f7")
	api.RegisterMessage((*OneGetTransportProtocol)(nil), "one_get_transport_protocol_51077d14")
	api.RegisterMessage((*OneGetTransportProtocolReply)(nil), "one_get_transport_protocol_reply_62a28eb3")
	api.RegisterMessage((*OneL2ArpBdGet)(nil), "one_l2_arp_bd_get_51077d14")
	api.RegisterMessage((*OneL2ArpBdGetReply)(nil), "one_l2_arp_bd_get_reply_221ac888")
	api.RegisterMessage((*OneL2ArpEntriesGet)(nil), "one_l2_arp_entries_get_4d418cf4")
	api.RegisterMessage((*OneL2ArpEntriesGetReply)(nil), "one_l2_arp_entries_get_reply_88e54ded")
	api.RegisterMessage((*OneLocatorDetails)(nil), "one_locator_details_b3988a30")
	api.RegisterMessage((*OneLocatorDump)(nil), "one_locator_dump_f27d5050")
	api.RegisterMessage((*OneLocatorSetDetails)(nil), "one_locator_set_details_6b846882")
	api.RegisterMessage((*OneLocatorSetDump)(nil), "one_locator_set_dump_c79e8ab0")
	api.RegisterMessage((*OneMapRegisterEnableDisable)(nil), "one_map_register_enable_disable_294103d1")
	api.RegisterMessage((*OneMapRegisterEnableDisableReply)(nil), "one_map_register_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*OneMapRegisterFallbackThreshold)(nil), "one_map_register_fallback_threshold_f7d4a475")
	api.RegisterMessage((*OneMapRegisterFallbackThresholdReply)(nil), "one_map_register_fallback_threshold_reply_e8d4e804")
	api.RegisterMessage((*OneMapRegisterSetTTL)(nil), "one_map_register_set_ttl_dd59f1f3")
	api.RegisterMessage((*OneMapRegisterSetTTLReply)(nil), "one_map_register_set_ttl_reply_e8d4e804")
	api.RegisterMessage((*OneMapRequestMode)(nil), "one_map_request_mode_f3f93ce9")
	api.RegisterMessage((*OneMapRequestModeReply)(nil), "one_map_request_mode_reply_e8d4e804")
	api.RegisterMessage((*OneMapResolverDetails)(nil), "one_map_resolver_details_60a5f5ca")
	api.RegisterMessage((*OneMapResolverDump)(nil), "one_map_resolver_dump_51077d14")
	api.RegisterMessage((*OneMapServerDetails)(nil), "one_map_server_details_60a5f5ca")
	api.RegisterMessage((*OneMapServerDump)(nil), "one_map_server_dump_51077d14")
	api.RegisterMessage((*OneNdpBdGet)(nil), "one_ndp_bd_get_51077d14")
	api.RegisterMessage((*OneNdpBdGetReply)(nil), "one_ndp_bd_get_reply_221ac888")
	api.RegisterMessage((*OneNdpEntriesGet)(nil), "one_ndp_entries_get_4d418cf4")
	api.RegisterMessage((*OneNdpEntriesGetReply)(nil), "one_ndp_entries_get_reply_d0822f37")
	api.RegisterMessage((*OneNshSetLocatorSet)(nil), "one_nsh_set_locator_set_7aa022dd")
	api.RegisterMessage((*OneNshSetLocatorSetReply)(nil), "one_nsh_set_locator_set_reply_e8d4e804")
	api.RegisterMessage((*OnePitrSetLocatorSet)(nil), "one_pitr_set_locator_set_7aa022dd")
	api.RegisterMessage((*OnePitrSetLocatorSetReply)(nil), "one_pitr_set_locator_set_reply_e8d4e804")
	api.RegisterMessage((*OneRlocProbeEnableDisable)(nil), "one_rloc_probe_enable_disable_294103d1")
	api.RegisterMessage((*OneRlocProbeEnableDisableReply)(nil), "one_rloc_probe_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*OneSetTransportProtocol)(nil), "one_set_transport_protocol_07b6b85f")
	api.RegisterMessage((*OneSetTransportProtocolReply)(nil), "one_set_transport_protocol_reply_e8d4e804")
	api.RegisterMessage((*OneShowPetrMode)(nil), "one_show_petr_mode_51077d14")
	api.RegisterMessage((*OneShowPetrModeReply)(nil), "one_show_petr_mode_reply_6b4c29dc")
	api.RegisterMessage((*OneShowPitrMode)(nil), "one_show_pitr_mode_51077d14")
	api.RegisterMessage((*OneShowPitrModeReply)(nil), "one_show_pitr_mode_reply_6b4c29dc")
	api.RegisterMessage((*OneShowXtrMode)(nil), "one_show_xtr_mode_51077d14")
	api.RegisterMessage((*OneShowXtrModeReply)(nil), "one_show_xtr_mode_reply_6b4c29dc")
	api.RegisterMessage((*OneStatsDetails)(nil), "one_stats_details_e1a34a05")
	api.RegisterMessage((*OneStatsDump)(nil), "one_stats_dump_51077d14")
	api.RegisterMessage((*OneStatsEnableDisable)(nil), "one_stats_enable_disable_eb0e943b")
	api.RegisterMessage((*OneStatsEnableDisableReply)(nil), "one_stats_enable_disable_reply_e8d4e804")
	api.RegisterMessage((*OneStatsFlush)(nil), "one_stats_flush_51077d14")
	api.RegisterMessage((*OneStatsFlushReply)(nil), "one_stats_flush_reply_e8d4e804")
	api.RegisterMessage((*OneUsePetr)(nil), "one_use_petr_6910787d")
	api.RegisterMessage((*OneUsePetrReply)(nil), "one_use_petr_reply_e8d4e804")
	api.RegisterMessage((*ShowOneMapRegisterFallbackThreshold)(nil), "show_one_map_register_fallback_threshold_51077d14")
	api.RegisterMessage((*ShowOneMapRegisterFallbackThresholdReply)(nil), "show_one_map_register_fallback_threshold_reply_c93a9113")
	api.RegisterMessage((*ShowOneMapRegisterState)(nil), "show_one_map_register_state_51077d14")
	api.RegisterMessage((*ShowOneMapRegisterStateReply)(nil), "show_one_map_register_state_reply_14304fbc")
	api.RegisterMessage((*ShowOneMapRegisterTTL)(nil), "show_one_map_register_ttl_51077d14")
	api.RegisterMessage((*ShowOneMapRegisterTTLReply)(nil), "show_one_map_register_ttl_reply_fa83dd66")
	api.RegisterMessage((*ShowOneMapRequestMode)(nil), "show_one_map_request_mode_51077d14")
	api.RegisterMessage((*ShowOneMapRequestModeReply)(nil), "show_one_map_request_mode_reply_d423107c")
	api.RegisterMessage((*ShowOneNshMapping)(nil), "show_one_nsh_mapping_51077d14")
	api.RegisterMessage((*ShowOneNshMappingReply)(nil), "show_one_nsh_mapping_reply_f2ff364e")
	api.RegisterMessage((*ShowOnePitr)(nil), "show_one_pitr_51077d14")
	api.RegisterMessage((*ShowOnePitrReply)(nil), "show_one_pitr_reply_dca512cc")
	api.RegisterMessage((*ShowOneRlocProbeState)(nil), "show_one_rloc_probe_state_51077d14")
	api.RegisterMessage((*ShowOneRlocProbeStateReply)(nil), "show_one_rloc_probe_state_reply_14304fbc")
	api.RegisterMessage((*ShowOneStatsEnableDisable)(nil), "show_one_stats_enable_disable_51077d14")
	api.RegisterMessage((*ShowOneStatsEnableDisableReply)(nil), "show_one_stats_enable_disable_reply_6b4c29dc")
	api.RegisterMessage((*ShowOneStatus)(nil), "show_one_status_51077d14")
	api.RegisterMessage((*ShowOneStatusReply)(nil), "show_one_status_reply_ddcf48ef")
	api.RegisterMessage((*ShowOneUsePetr)(nil), "show_one_use_petr_51077d14")
	api.RegisterMessage((*ShowOneUsePetrReply)(nil), "show_one_use_petr_reply_1eb21916")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*OneAddDelAdjacency)(nil),
		(*OneAddDelAdjacencyReply)(nil),
		(*OneAddDelL2ArpEntry)(nil),
		(*OneAddDelL2ArpEntryReply)(nil),
		(*OneAddDelLocalEid)(nil),
		(*OneAddDelLocalEidReply)(nil),
		(*OneAddDelLocator)(nil),
		(*OneAddDelLocatorReply)(nil),
		(*OneAddDelLocatorSet)(nil),
		(*OneAddDelLocatorSetReply)(nil),
		(*OneAddDelMapRequestItrRlocs)(nil),
		(*OneAddDelMapRequestItrRlocsReply)(nil),
		(*OneAddDelMapResolver)(nil),
		(*OneAddDelMapResolverReply)(nil),
		(*OneAddDelMapServer)(nil),
		(*OneAddDelMapServerReply)(nil),
		(*OneAddDelNdpEntry)(nil),
		(*OneAddDelNdpEntryReply)(nil),
		(*OneAddDelRemoteMapping)(nil),
		(*OneAddDelRemoteMappingReply)(nil),
		(*OneAdjacenciesGet)(nil),
		(*OneAdjacenciesGetReply)(nil),
		(*OneEidTableAddDelMap)(nil),
		(*OneEidTableAddDelMapReply)(nil),
		(*OneEidTableDetails)(nil),
		(*OneEidTableDump)(nil),
		(*OneEidTableMapDetails)(nil),
		(*OneEidTableMapDump)(nil),
		(*OneEidTableVniDetails)(nil),
		(*OneEidTableVniDump)(nil),
		(*OneEnableDisable)(nil),
		(*OneEnableDisablePetrMode)(nil),
		(*OneEnableDisablePetrModeReply)(nil),
		(*OneEnableDisablePitrMode)(nil),
		(*OneEnableDisablePitrModeReply)(nil),
		(*OneEnableDisableReply)(nil),
		(*OneEnableDisableXtrMode)(nil),
		(*OneEnableDisableXtrModeReply)(nil),
		(*OneGetMapRequestItrRlocs)(nil),
		(*OneGetMapRequestItrRlocsReply)(nil),
		(*OneGetTransportProtocol)(nil),
		(*OneGetTransportProtocolReply)(nil),
		(*OneL2ArpBdGet)(nil),
		(*OneL2ArpBdGetReply)(nil),
		(*OneL2ArpEntriesGet)(nil),
		(*OneL2ArpEntriesGetReply)(nil),
		(*OneLocatorDetails)(nil),
		(*OneLocatorDump)(nil),
		(*OneLocatorSetDetails)(nil),
		(*OneLocatorSetDump)(nil),
		(*OneMapRegisterEnableDisable)(nil),
		(*OneMapRegisterEnableDisableReply)(nil),
		(*OneMapRegisterFallbackThreshold)(nil),
		(*OneMapRegisterFallbackThresholdReply)(nil),
		(*OneMapRegisterSetTTL)(nil),
		(*OneMapRegisterSetTTLReply)(nil),
		(*OneMapRequestMode)(nil),
		(*OneMapRequestModeReply)(nil),
		(*OneMapResolverDetails)(nil),
		(*OneMapResolverDump)(nil),
		(*OneMapServerDetails)(nil),
		(*OneMapServerDump)(nil),
		(*OneNdpBdGet)(nil),
		(*OneNdpBdGetReply)(nil),
		(*OneNdpEntriesGet)(nil),
		(*OneNdpEntriesGetReply)(nil),
		(*OneNshSetLocatorSet)(nil),
		(*OneNshSetLocatorSetReply)(nil),
		(*OnePitrSetLocatorSet)(nil),
		(*OnePitrSetLocatorSetReply)(nil),
		(*OneRlocProbeEnableDisable)(nil),
		(*OneRlocProbeEnableDisableReply)(nil),
		(*OneSetTransportProtocol)(nil),
		(*OneSetTransportProtocolReply)(nil),
		(*OneShowPetrMode)(nil),
		(*OneShowPetrModeReply)(nil),
		(*OneShowPitrMode)(nil),
		(*OneShowPitrModeReply)(nil),
		(*OneShowXtrMode)(nil),
		(*OneShowXtrModeReply)(nil),
		(*OneStatsDetails)(nil),
		(*OneStatsDump)(nil),
		(*OneStatsEnableDisable)(nil),
		(*OneStatsEnableDisableReply)(nil),
		(*OneStatsFlush)(nil),
		(*OneStatsFlushReply)(nil),
		(*OneUsePetr)(nil),
		(*OneUsePetrReply)(nil),
		(*ShowOneMapRegisterFallbackThreshold)(nil),
		(*ShowOneMapRegisterFallbackThresholdReply)(nil),
		(*ShowOneMapRegisterState)(nil),
		(*ShowOneMapRegisterStateReply)(nil),
		(*ShowOneMapRegisterTTL)(nil),
		(*ShowOneMapRegisterTTLReply)(nil),
		(*ShowOneMapRequestMode)(nil),
		(*ShowOneMapRequestModeReply)(nil),
		(*ShowOneNshMapping)(nil),
		(*ShowOneNshMappingReply)(nil),
		(*ShowOnePitr)(nil),
		(*ShowOnePitrReply)(nil),
		(*ShowOneRlocProbeState)(nil),
		(*ShowOneRlocProbeStateReply)(nil),
		(*ShowOneStatsEnableDisable)(nil),
		(*ShowOneStatsEnableDisableReply)(nil),
		(*ShowOneStatus)(nil),
		(*ShowOneStatusReply)(nil),
		(*ShowOneUsePetr)(nil),
		(*ShowOneUsePetrReply)(nil),
	}
}
